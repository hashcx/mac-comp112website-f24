[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT 112: Introduction to Data Science",
    "section": "",
    "text": "Welcome",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html",
    "href": "src/01-RStudio_Intro.html",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "",
    "text": "1.1 Learning Goals",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html#learning-goals",
    "href": "src/01-RStudio_Intro.html#learning-goals",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "",
    "text": "Download and install the necessary tools (R, RStudio)\nDevelop comfort in navigating the tools in RStudio\nDevelop comfort in writing and knitting a R Markdown (or a new Quarto) file\nIdentify the characteristics of tidy data\nUse R code: as a calculator and to explore tidy data",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html#getting-started-in-rstudio",
    "href": "src/01-RStudio_Intro.html#getting-started-in-rstudio",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "\n1.2 Getting Started in RStudio",
    "text": "1.2 Getting Started in RStudio\nAs you might guess from the name, “Data Science” requires data. Working with modern (large, messy) data sets requires statistical software. We’ll exclusively use RStudio. Why?\n\nit’s free\n\nit’s open source (the code is free & anybody can contribute to it)\nit has a huge online community (which is helpful for when you get stuck)\n\nit’s one of the industry standards\n\nit can be used to create reproducible and lovely documents (In fact, the course materials that you’re currently reading were constructed entirely within RStudio!)\n\n\n1.2.1 Download R & RStudio\nTo get started, take the following two steps in the given order. Even if you already have R/RStudio, make sure to update to the most recent versions.\n\nDownload and install the R statistical software at https://mirror.las.iastate.edu/CRAN/\n\n\n\nMac: Check to see if you have an Intel or Apple Silicon Processor Chip (Apple logo &gt; About this Mac). This will impact the version you download.\n\n\nDownload and install the FREE version of RStudio at https://posit.co/download/rstudio-desktop/\n\n\n\nMac: Once you download the dmg file and click on it, drag the RStudio icon to applications and then open Finder and click the eject icon next to the RStudio temporary drive under Locations.\n\nIf you are having issues with downloading, log on to https://rstudio.macalester.edu/ (use Mac credentials) to use the RStudio server.\nWhat’s the difference between R and RStudio? Mainly, RStudio requires R – thus it does everything R does and more. We will be using RStudio exclusively.\n\n1.2.2 A quick tour of RStudio\nOpen RStudio! You should see four panes, each serving a different purpose:\n\n\n\n\n\n\n\nFigure 1.1: RStudio Interface\n\n\n\n\nThis short video tour of RStudio summarizes some basic features of the console.\nUse RStudio as a simple calculator to do the following:\n  \n  1) Perform a simple calculation: calculate `90/3`.\n  2) RStudio has built-in *functions* to which we supply the necessary *arguments*:  `function(arguments)`.  Use the built-in function `sqrt` to calculate the square root of 25.\n  3) Use the built-in function `rep` to repeat the number \"5\" eight times. (Type `?rep` in the console and press Return. Check out the Help documentation for examples at the bottom.)\n  4) Use the `seq` function to create the vector `(0, 3, 6, 9, 12)`.  (Type `?seq` in the console and press Return.)\n  5) Create a new vector by concatenating three repetitions of the vector from the previous part. (Type `?c` in the console and press Return.)\nSolution\n\n90/3 \n## [1] 30\n\nsqrt(25)\n## [1] 5\n\nrep(5, times = 8)\n## [1] 5 5 5 5 5 5 5 5\n\nseq(0, 12, by = 3)\n## [1]  0  3  6  9 12\n\nrep(seq(0, 12, by = 3), times =  3)\n##  [1]  0  3  6  9 12  0  3  6  9 12  0  3  6  9 12\n\nrep(seq(0, 12, by = 3), each = 3) #notice the difference between the named input of times and each\n##  [1]  0  0  0  3  3  3  6  6  6  9  9  9 12 12 12\n\n```{name=“Assigning Values to Variables”, label=“assignment”} We often want to store our output for later use (why?). The basic idea in R:\n`name &lt;- output`\nCopy and paste the following code into the console, line by line. NOTE: RStudio ignores any content after the #. Thus we use this to make ‘comments’ and organize our code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#type square_3\nsquare_3\n    \n#calculate 3 squared\n3^2    \n    \n#store this as \"square_3\"\nsquare_3 &lt;- 3^2    \n    \n#type square_3 again!\nsquare_3\n    \n#do some math with square_3\nsquare_3 + 2\n:::\n\n1.2.3 Data\nNot only does “Data Science” require statistical software, it requires DATA! Consider the Google definition:\n\n\n\n\nA datum.\n\n\n\nWith this definition in mind, which of the following are examples of data?\n\ntables\n\n\n\n  family father mother sex height nkids\n1      1   78.5   67.0   M   73.2     4\n2      1   78.5   67.0   F   69.2     4\n3      1   78.5   67.0   F   69.0     4\n4      1   78.5   67.0   F   69.0     4\n5      2   75.5   66.5   M   73.5     4\n6      2   75.5   66.5   M   72.5     4\n\n\n\nphoto\nvideo\ntext / tweets\n\nWe’ll mostly work with data that look like this:\n\n\n  family father mother sex height nkids\n1      1   78.5   67.0   M   73.2     4\n2      1   78.5   67.0   F   69.2     4\n3      1   78.5   67.0   F   69.0     4\n4      1   78.5   67.0   F   69.0     4\n5      2   75.5   66.5   M   73.5     4\n6      2   75.5   66.5   M   72.5     4\n\n\nThis isn’t as restrictive as it seems. We can convert the above signals: photos, videos, and text to a data table format!\n\n1.2.4 Tidy Data\nExample: After a scandal among FIFA officials, fivethirtyeight.com posted an analysis of FIFA viewership, “How to Break FIFA”. Here’s a snapshot of the data used in this article:\n\n\n\n\n\n\n\n\n\n\n\ncountry\nconfederation\npopulation_share\ntv_audience_share\ngdp_weighted_share\n\n\n\nUnited States\nCONCACAF\n4.5\n4.3\n11.3\n\n\nJapan\nAFC\n1.9\n4.9\n9.1\n\n\nChina\nAFC\n19.5\n14.8\n7.3\n\n\nGermany\nUEFA\n1.2\n2.9\n6.3\n\n\nBrazil\nCONMEBOL\n2.8\n7.1\n5.4\n\n\nUnited Kingdom\nUEFA\n0.9\n2.1\n4.2\n\n\nItaly\nUEFA\n0.9\n2.1\n4.0\n\n\nFrance\nUEFA\n0.9\n2.0\n4.0\n\n\nRussia\nUEFA\n2.1\n3.1\n3.5\n\n\nSpain\nUEFA\n0.7\n1.8\n3.1\n\n\n\n\n\nThe data table above is in tidy format. Tidy data tables have three key features:\n\nEach row represents a unit of observation (also referred to as a case).\n\nEach column represents a variable (ie. an attribute of the cases that can vary from case to case). Each variable is one of two types:\n\n\n\n\nquantitative = numerical/numbers with units\n\n\ncategorical = discrete possibilities/categories\n\n\n\nEach entry contains a single data value; no analysis, summaries, footnotes, comments, etc., and only one value per cell\n\n\n\nTidy Data: Art by Allison Horst\n\nConsider the following in a group:   \n\nWhat are the units of observation in the FIFA data?\n\nWhat are the variables? Which are quantitative? Which are categorical?\n\nAre these tidy data?\n\nSolution\n\nA FIFA member country\ncountry name, soccer or football confederation, country’s share of global population (percentage), country’s share of global world cup TV Audience (percentage), country’s GDP-weighted audience share (percentage)\nYes\n\n\nCheck out the following data.  Explain to each other why they are untidy and how we can tidy them.    \n  \n  a. Data 1: FIFA    \n    \n              country  confederation  population share    tv_share\n        ------------- -------------- ----------------- ----------- ------------------\n        United States       CONCACAF     i don't know*       4.3%  *look up later      \n                 Japan           AFC               1.9       4.9%\n                 China           AFC              19.5      14.8%    \n                                                        total=24%           \n  \n  b. Data 2: Gapminder life expectancies by country    \n        \n                          country  1952  1957  1962\n        ------------ ------------ ----- ----- -----\n                Asia  Afghanistan  28.8  30.3  32.0\n                          Bahrain  50.9  53.8  56.9    \n              Africa      Algeria  43.0  45.7  48.3    \n\nSolution\n\nThere are notes such as “I don’t know” and “look up later” in columns with numeric values; the last row with the total is a summary. We could remove the text notes, replace it with the value if known, and remove the last row with the total summary.\nThe first column does not have a row name. It should be continent. Additionally, Bahrain needs a value for the continent.The column names ‘1952’, ‘1957’ and ‘1962’ are values not variables. The table should be ‘pivoted’ (more information on this coming soon!), so that there is an additional column named ‘year’ and each country has three observations (rows) associated with it (one for each year).\n\n1.2.5 Data Basics in RStudio\nFor now, we’ll focus on tidy data. In a couple of weeks, you’ll learn how to “clean data” and turn untidy data into tidy data.\nThe first step to working with data in RStudio is getting it in there!  How we do this depends on its format (eg: Excel spreadsheet, csv file, txt file) and storage locations (eg: online, within Wiki, desktop).  \n\nLuckily for us, the `fifa_audience` data are stored in the `fivethirtyeight` RStudio package. Copy and paste the following code into the Console and press Enter.\n\n#download the data and information in the fivethirtyeight package (we only need to do this once)\ninstall.packages('fivethirtyeight')\n\n#load the fivethirtyeight package\nlibrary(fivethirtyeight)\n    \n#load the fifa data\ndata(\"fifa_audience\")\n    \n#store this under a shorter, easier name\nfifa &lt;- fifa_audience\n\nBefore we can analyze our data, we must understand its structure.  Try out the following functions (copy and paste into the Console).  For each, make a note that describes its action.  \n\n#(what does View do?)\nView(fifa)  \n\n#(what does head do?)\nhead(fifa)  \n\n#(what does dim do?)\ndim(fifa)           \n\n#(what does names do?)\nnames(fifa)         \n\nSolution\n\n#View() opens up a new tab with a spreadsheet preview of the data to visually explore the data. It is commented out in the Rmarkdown/Quarto file because this is an interactive feature\n#View(fifa)  \n\n#head() gives the first 6 (default number) rows of a data set\nhead(fifa)  \n## # A tibble: 6 × 5\n##   country    confederation population_share tv_audience_share gdp_weighted_share\n##   &lt;chr&gt;      &lt;chr&gt;                    &lt;dbl&gt;             &lt;dbl&gt;              &lt;dbl&gt;\n## 1 United St… CONCACAF                   4.5               4.3               11.3\n## 2 Japan      AFC                        1.9               4.9                9.1\n## 3 China      AFC                       19.5              14.8                7.3\n## 4 Germany    UEFA                       1.2               2.9                6.3\n## 5 Brazil     CONMEBOL                   2.8               7.1                5.4\n## 6 United Ki… UEFA                       0.9               2.1                4.2\n\n#dim() gives the number of rows and number of columns\ndim(fifa)           \n## [1] 191   5\n\n#names() gives the names of the columns/variables\nnames(fifa)   \n## [1] \"country\"            \"confederation\"      \"population_share\"  \n## [4] \"tv_audience_share\"  \"gdp_weighted_share\"\n\nData are also only useful if we know what they measure!  The `fifa` data table is *tidy*; it doesn't have any helpful notes in the data itself.\nRather, information about the data is stored in a separate codebook. Codebooks can be stored in many ways (eg: Google docs, word docs, etc). Here the authors have made their codebook available in RStudio (under the original fifa_audience name). Check it out (run the following code in the console):\n\n?fifa_audience\n\n\nWhat does population_share measure?\nWhat are the units of population_share?\n\nSolution\n\nCountry’s share of global population\nPercentage between 0 and 100\n\nConsider the following:\n\nWe might want to access and focus on a single variable. To this end, we can use the $ notation (see below). What are the values of tv_audience_share? Of confederation? Is it easy to figure out?\n\n\nfifa$tv_audience_share\nfifa$confederation\n\nSolution\n\nThe values of tv_audience_share are numerical values between 0 and 7.1. By scanning through the long list, it looks like the values of confederation are words (a string of alphabetical characters): OFC, CAF, AFC, UEFA, CONCACAF, CONMEBOL.\n\nIt’s important to understand the format/class of each variable (quantitative, categorical, date, etc) in both its meaning and its structure within RStudio:\n\nclass(fifa$tv_audience_share)\nclass(fifa$confederation)\n\n\nIf a variable is categorical (in factor format), we can determine its levels / category labels. What are the value of confederation?\n\n\nlevels(fifa$confederation) #it is in character format\nlevels(factor(fifa$confederation)) #we can convert to factor format\n\nSolution\n\nThe values of confederation are words, also known as strings of characters in computing languages (indicated by the quotes around them): “AFC”, “CAF”, “CONCACAF”, “CONMEBOL”, “OFC”, “UEFA”.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html#r-markdownquarto-and-reproducible-research",
    "href": "src/01-RStudio_Intro.html#r-markdownquarto-and-reproducible-research",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "\n1.3 R Markdown/Quarto and Reproducible Research",
    "text": "1.3 R Markdown/Quarto and Reproducible Research\n\nReproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. - Reproducible Research, Coursera\n\nUseful Resources:\n\n\nR Markdown Quick Tour\n\nR Markdown Cheatsheet\nR Markdown Reference Guide\nQuarto Get Started Guide\n\nResearch often makes claims that are difficult to verify. A recent study of published psychology articles found that less than half of published claims could be reproduced. One of the most common reasons claims cannot be reproduced is confusion about data analysis. It may be unclear exactly how data was prepared and analyzed, or there may be a mistake in the analysis.\nIn this course we will use an innovative format called R Markdown that dramatically increases the transparency of data analysis. R Markdown interleaves data, R code, graphs, tables, and text, packaging them into an easily publishable format. Quarto is the update version of R Markdown that allows you to incorporate code from many programming languages and is more general than RStudio. You can choose to work in either format.\nTo use R Markdown, you will write an R Markdown formatted file in RStudio and then ask RStudio to knit it into an HTML document (or occasionally a PDF or MS Word document). If you work in a Quarto document, you press the render button to turn it into an HTML document.\nLook at this [Sample RMarkdown](http://www.statpower.net/Content/310/R%20Stuff/SampleMarkdown.Rmd) and the [HTML webpage](http://www.statpower.net/Content/310/R%20Stuff/SampleMarkdown.html) it creates. Consider the following and discuss:\n    \na) How are bullets, italics, and section headers represented in the R Markdown file?\nb) How does R code appear in the R Markdown file?\nc) In the HTML webpage, do you see the R code, the output of the R code, or both?\nSolution\nBullets are represented with * and +\nItalics are represented with * before and after a word or phrase\nSection headers are represented with #\n\nR code chunks are between 3 tick marks at the beginning and end; it is R code if there is an r in curly braces\n  \nIf echo=FALSE in curly braces, the code is not shown. Otherwise, both code and output are shown by default.\nNow take a look at the R Markdown cheatsheet. Look up the R Markdown features from the previous question on the cheatsheet. There’s a great deal more information there.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html#practice",
    "href": "src/01-RStudio_Intro.html#practice",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "\n1.4 Practice",
    "text": "1.4 Practice\nComplete the following. If you get stuck along the way, refer to the R Markdown cheatsheet linked above, search the web for answers, and/or ask for help!\nCreate a new R Markdown (or a Quarto document) about your favorite food.    \n\na. Create a new file in RStudio (File -&gt; New File -&gt; R Markdown or Quarto Document) with a Title of `First_Markdown` [unclick the visual editor button]. Save it to a new folder on your Desktop called `COMP_STAT_112`; within that new folder, create another new folder called `Assignment_01`.  \nb. Make sure you can compile/render (Knit/Render) the Markdown/Quarto into a webpage (html file).  \nc. Add a new line between `title` and `output` that reads: `author: Your Name`.\nd. Delete everything from `## RMarkdown` or `## Quarto` and below. Create a new section by typing `## Favorite Food`.\ne. Write a very brief essay about your favorite food. Make sure to include:    \n  * A picture from the web    \n  * A bullet list    \n  * A numbered list  \nf. Compile (Knit/Render) the document into an html file [which appears in the folder `Assignment_01` you created] and make sure it looks like you want it to.\nThere's a data set named `comic_characters` in the `fivethirtyeightdata` package.\nInstall the package by running the following in the console:\ninstall.packages('fivethirtyeightdata', repos = 'https://fivethirtyeightdata.github.io/drat/', type = 'source')\nCheck out the codebook (hint: use ?) to understand what these data measure.\nAdd a second section to your RMarkdown file that you’ve created (with ##), and then use code chunks and R commands to perform/answer the following tasks/questions:\n\nLoad the comic_characters data.\n\nWhat are the units of observation? How many observations are there?\n\nIn a new code chunk, print out the first 12 rows of the data set.\nGet a list of all variable names.\n\nWhat’s the class of the date variable?\n\nList all of the unique entries in the gsm variable (no need to include NA).\nCompile the document into an html file.",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/01-RStudio_Intro.html#appendix-r-functions",
    "href": "src/01-RStudio_Intro.html#appendix-r-functions",
    "title": "\n1  Intro to R, RStudio, and R Markdown\n",
    "section": "\n1.5 Appendix: R Functions",
    "text": "1.5 Appendix: R Functions\n\n1.5.1 R as a calculator\n\n\nFunction/Operator\nAction\nExample\n\n\n\n/\nDivision\n90/30\n\n\n*\nMultiplication\n2*5\n\n\n+\nAddition\n1+1\n\n\n-\nSubtraction\n1-1\n\n\n^\nExponent/Power to\n3^2\n\n\nsqrt(x)\nSquare root\nsqrt(25)\n\n\n\n1.5.2 R Basics\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\ninstall.packages('packagename')\nDownload a R package (function, data, etc.) from repository\ninstall.packages('fivethirtyeight')\n\n\nlibrary(packagename)\nAccess a downloaded R package\nlibrary(fivethirtyeight)\n\n\n?function_object_name\nOpens the help/documentation for the function or object\n?seq\n\n\nrep(x, times, each)\nRepeat x a # times\nrep(5,8)\n\n\nseq(from, to, by)\nSequence generation\nseq(0, 12, by = 2)\n\n\nname &lt;- value_output\nAssign value or output to a name\nsquared_3 &lt;- 3^2\n\n\nView(x)\nOpen spreadsheet viewer of dataset\nView(fifa_audience)\n\n\nhead(x)\nPrint the first 6 rows of a dataset\nhead(fifa_audience)\n\n\ndim(x)\nPrint the dimensions (number of rows and columns) of a dataset\ndim(fifa_audience)\n\n\nnames(x)\nPrint the names of the variables in a dataset\nnames(fifa_audience)\n\n\n$\nUsed to access one variable in a data set based on its name\nfifa_audience$confederation\n\n\nclass(x)\nPrint the class types argument or input\nclass(fifa_audience$confederation)\n\n\nfactor(x)\nConverts the argument or input to a factor class type (categorical variable)\nfactor(fifa_audience$confederation)\n\n\nlevels(x)\nPrints the unique categories of a factor\nlevels(factor(fifa_audience$confederation))",
    "crumbs": [
      "Foundation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R, RStudio, and R Markdown</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html",
    "href": "src/02-Intro_Data_Viz.html",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "",
    "text": "Learning Goals\nYou can download a template .Rmd of the examples and exercises in this activity here. Put this file in a new folder called Assignment_02 in your folder for COMP_STAT_112.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#learning-goals",
    "href": "src/02-Intro_Data_Viz.html#learning-goals",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "",
    "text": "Understand the Grammar of Graphics\nUse ggplot2 to create basic layers of graphics\nUnderstand the different basic univariate visualizations for categorical and quantitative variables",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#benefits-of-visualizations",
    "href": "src/02-Intro_Data_Viz.html#benefits-of-visualizations",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "Benefits of Visualizations",
    "text": "Benefits of Visualizations\n\n\nVisualizations help us understand what we’re working with:\n\nWhat are the scales of our variables?\n\nAre there any outliers, i.e. unusual cases?\n\nWhat are the patterns among our variables?\n\n\n\n\nThis understanding will inform our next steps:\n\nWhat method of analysis / model is appropriate?\n\nOnce our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#glyphs",
    "href": "src/02-Intro_Data_Viz.html#glyphs",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "Glyphs",
    "text": "Glyphs\nIn its original sense, in archaeology, a glyph is a carved symbol.\n\n\n\n\n\n\nHeiroglyph\n\nMayan glyph\n\n\n\n\n\n\n\nData Glyph\nA data glyph is also a mark, e.g.\n\nThe features of a data glyph encodes the value of variables.\n\nSome are very simple, e.g. a dot: \n\nSome combine different elements, e.g. a pointrange: \n\nSome are complicated, e.g. a dotplot: \n\nComponents of Graphics\n\n\n\n\n\n\n\nFigure 2.1: Blood pressure readings from a random subset of the NHANES data set.\n\n\n\n\n\nframe: The position scale describing how data are mapped to x and y\n\nglyph: The basic graphical unit that represents one case.\n\nother terms used include mark and symbol.\n\n\n\naesthetic: a visual property of a glyph such as position, size, shape, color, etc.\n\nmay be mapped based on data values: smoker -&gt; color\n\nmay be set to particular non-data related values: color is black\n\n\n\n\nfacet: a subplot that shows one subset of the data\n\nrather than represent sex by shape, we could split into two subplots\n\n\n\nscale: A mapping that translates data values into aesthetics.\n\nexample: never-&gt; pink; former-&gt; aqua; current-&gt; green\n\n\n\n\nguide: An indication for the human viewer of the scale. This allows the viewer to translate aesthetics back into data values.\n\nexamples: x- and y-axes, various sorts of legends\n\n\nEye Training for the Layered Grammar of Graphics\n\nFor your assigned graphic, discuss the following seven questions with your partner(s):\n\n1. What variables constitute the frame?\n2. What glyphs are used?\n3. What are the aesthetics for those glyphs?\n4. Which variable is mapped to each aesthetic?\n5. Which variable, if any, is used for faceting?\n6. Which scales are displayed with a guide?\n7. What raw data would be required for this plot, and what form should it be in?\n\nHere are the graphics examples, all taken from the New York Times website:\n\na. [Admissions gap](http://www.nytimes.com/interactive/2013/05/07/education/college-admissions-gap.html?_r=0)\n#. [Medicare hospital charges](https://www.nytimes.com/interactive/2014/06/02/business/how-much-hospitals-charged-medicare-for-the-same-procedures.html)\n#. [Football conferences](http://www.nytimes.com/newsgraphics/2013/11/30/football-conferences/)\n#. [Housing prices](https://www.nytimes.com/interactive/2014/01/23/business/case-shiller-slider.html)\n#. [Baseball pitching](http://www.nytimes.com/interactive/2013/03/29/sports/baseball/Strikeouts-Are-Still-Soaring.html)\n#. [Phillips curve](http://www.nytimes.com/interactive/2013/10/09/us/yellen-fed-chart.html)\n#. [School mathematics ratings](http://www.nytimes.com/interactive/2013/02/04/science/girls-lead-in-science-exam-but-not-in-the-united-states.html)\n#. [Corporate taxes](http://www.nytimes.com/interactive/2013/05/25/sunday-review/corporate-taxes.html)\n\n\nGlyph-Ready Data\nNote the mapping of data to aesthetics for Figure @ref(fig:fig-bp):\n   sbp [Systolic Blood Pressure] -&gt; x      \n   dbp [Diastolic Blood Pressure] -&gt; y     \nsmoker -&gt; color\n   sex -&gt; shape\nGlyph-ready data has this form:\n\nThere is one row for each glyph to be drawn.\nThe variables in that row are mapped to aesthetics of the glyph (including position).\n\n\n\n\nA subset of the NHANES data set.\n\nsbp\ndbp\nsex\nsmoker\n\n\n\n112\n55\nmale\nformer\n\n\n144\n84\nmale\nnever\n\n\n143\n84\nfemale\nnever\n\n\n110\n62\nfemale\nnever\n\n\n121\n72\nfemale\nnever\n\n\n129\n60\nfemale\nnever",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#data-visualization-workflow-ggplot",
    "href": "src/02-Intro_Data_Viz.html#data-visualization-workflow-ggplot",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "Data Visualization Workflow + ggplot\n",
    "text": "Data Visualization Workflow + ggplot\n\nLayers – Building up Complex Plots\nUsing the ggplot2 package, we can create graphics by building up layers, each of which may have its own data, glyphs, aesthetic mapping, etc. As an example, let’s peel back the layers used to create Figure @ref(fig:fig-bp).\nThe first layer just identifies the data set. It sets up a blank canvas, but does not actually plot anything:\n\nggplot(data = Tmp)\n\n\n\n\n\n\n\nNext, we add a geometry layer to identify the mapping of data to aesthetics for each of the glyphs:\n\nggplot(data = Tmp) +\n  geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8)\n\n\n\n\n\n\n\nNext, we can add some axes labels as guides:\n\nggplot(data = Tmp) +\n  geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) +\n  xlab(\"Systolic BP\") + ylab(\"Diastolic BP\")\n\n\n\n\n\n\n\nAnd, finally, we can change the scale of the color used for smoker status:\n\nggplot(data = Tmp) +\n  geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) +\n  xlab(\"Systolic BP\") + ylab(\"Diastolic BP\") +\n  scale_color_manual(values = c(\"#F8766D\", \"#00BFC4\", \"#00BA38\"))\n\n\n\n\n\n\n\nIf instead we wanted to facet into columns based on smoker status, we could add another layer for that:\n\nggplot(data = Tmp) +\n  geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) +\n  xlab(\"Systolic BP\") + ylab(\"Diastolic BP\") +\n  scale_color_manual(values = c(\"#F8766D\", \"#00BFC4\", \"#00BA38\")) +\n  facet_grid(. ~ smoker)\n\n\n\n\n\n\n\nFor more information on all of the different types of layers we can add to graphics, see the ggplot2 reference page and the data visualization with ggplot2 cheat sheet.\nGetting Started\nThere’s no end to the number and type of visualizations you could make. Thus the process can feel overwhelming. FlowingData makes good recommendations for data viz workflow:\n\n\nAsk the data questions. Simple research questions will guide the types of visualizations that you should construct.\n\n\nStart with the basics and work incrementally. Before constructing complicated or multivariate or interactive graphics, start with simple visualizations. An understanding of the simple patterns provides a foundation upon which to build more advanced analyses and visualizations. This incremental process works particularly well with the layered grammar of graphics in ggplot.\n\nFocus. Reporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations. Here is an example of one dataset visualized 25 different ways, each with a different focus and interpretation, and what can happen if you let the data ramble on without a focus.\n\nIn this course we’ll largely construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package:\n\nlibrary(ggplot2)\n\nThe best way to learn about ggplot is to just play around. Focus on the patterns and potential of their application. It will be helpful to have the RStudio Data Visualization cheat sheet handy as you complete this activity.\nAn Example\nThe “Bechdel test”, named after cartoonist Alison Bechdel, tests whether movies meet the following criteria:\n\nThere are \\(\\ge\\) 2 (named) female characters;\n\nthese women talk to each other…\n\nabout something other than a man.\n\nIn the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package:\n\nlibrary(fivethirtyeight)\ndata(bechdel)\nhead(bechdel)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nimdb\ntitle\nclean_test\nbinary\nbudget_2013\ndomgross_2013\nintgross_2013\n\n\n\n2013\ntt1711425\n21 & Over\nnotalk\nFAIL\n13000000\n25682380\n42195766\n\n\n2012\ntt1343727\nDredd 3D\nok\nPASS\n45658735\n13611086\n41467257\n\n\n2013\ntt2024544\n12 Years a Slave\nnotalk\nFAIL\n20000000\n53107035\n158607035\n\n\n2013\ntt1272878\n2 Guns\nnotalk\nFAIL\n61000000\n75612460\n132493015\n\n\n2013\ntt0453562\n42\nmen\nFAIL\n40000000\n95020213\n95020213\n\n\n2013\ntt1335975\n47 Ronin\nmen\nFAIL\n225000000\n38362475\n145803842\n\n\n\n\n\n\nBefore diving into any visualizations of these data, we first must understand its structure and contents. Discuss the following:  \n  \n  a. What are the units of observation and how many units are in this sample? \n  b. What are the levels of the `clean_test` and `binary` categorical variables?    \n  c. Check out the codebook for `bechdel` (`?bechdel`).  What's the difference between `domgross_2013` and `domgross`?    \n\nSolution\n\n#units of observation are movies; there are 1794 movies in this sample\ndim(bechdel)\n## [1] 1794   15\n\n#clean_test has values of \"nowomen\", \"notalk\", \"men\", \"dubious\", \"ok\"\n#View(bchedel) and look at values or summarize like below\ntable(bechdel$clean_test)\n## \n## nowomen  notalk     men dubious      ok \n##     141     514     194     142     803\nlevels(bechdel$clean_test)\n## [1] \"nowomen\" \"notalk\"  \"men\"     \"dubious\" \"ok\"\n\n#binary has values of PASS or FAIL\ntable(bechdel$binary)\n## \n## FAIL PASS \n##  991  803\nlevels(factor(bechdel$binary))\n## [1] \"FAIL\" \"PASS\"\n\n# domgross_2013 is the domestic gross in US dollars but it is inflation adjusted with respect to 2013\n#?bechdel\n\n\n\nWe'll consider *univariate* visualizations of the `clean_test` and `budget_2013` variables. Discuss the following:\n  \n  a. What features would we like a visualization of the *categorical* `clean_test` variable to capture?    \n  b. What features would we like a visualization of the *quantitative* `budget_2013` variable to capture?    \n\n\nSolution\n\ncapture the frequency of each way a movie can fail or pass the Bechdel test\ncapture the typical budget as well as how much variation there is across movies and if there are any outliers\n\nCategorical univariate visualization\nWe begin by stating a clear research question:\n\nAmong the movies in our sample, what fraction pass the Bechdel test? Among those that fail the test, in which way do they fail (e.g., there are no women, there are women but they only talk about men,…)?\n\nTo answer the above research question, we can explore the categorical clean_test variable. A table provides a simple summary of the number of movies that fall into each clean_test category:\n\ntable(bechdel$clean_test)\n\n\nnowomen  notalk     men dubious      ok \n    141     514     194     142     803 \n\n\n\nExamine the table of `clean_test` data, and try to interpret it. What insights does it provide about the original research question?\n\nSolution\nAmong the categories, the “ok” category was most frequent, meaning that 803 of the 1794 movies in the sample passed the Bechdel Test. However, among those 991 movies that did not pass the test, most of them (514 of them) did not pass because the women did not talk.\n\nBecause clean_test is a categorical variable, a bar chart provides an appropriate visualization of this table. In examining the bar chart, keep your eyes on the following.\n\n\nvariability: Are cases evenly spread out among the categories or are some categories more common than others?\n\n\ncontextual implications: In the context of your research, what do you learn from the bar chart? How would you describe your findings to a broad audience?\n\n\nTry out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot and add a comment describe the addition.    \n\n\n# plot 1: set up a plotting frame (a blank canvas)\nggplot(bechdel, aes(x = clean_test))\n\n# plot 2: what changed / how did we change it?\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar()\n\n# plot 3: what changed / how did we change it?\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar() +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\n# plot 4: what changed / how did we change it?\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar(color = \"purple\") +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\n# plot 5: what changed / how did we change it?\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar(fill = \"purple\") +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\nSolution\n\n# plot 1: set up a plotting frame (a blank canvas)\nggplot(bechdel, aes(x = clean_test))\n\n\n\n\n\n\n\n# plot 2: Added bars that reflect the count or frequency of the movies within each category\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar()\n\n\n\n\n\n\n\n# plot 3: Added/changed the text labels for the x and y axes\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar() +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\n\n\n\n\n\n\n# plot 4: Changed the outline color of the bars to purple\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar(color = \"purple\") +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\n\n\n\n\n\n\n# plot 5: Changed the fill  color of the bars to purple\nggplot(bechdel, aes(x = clean_test)) +\ngeom_bar(fill = \"purple\") +\nlabs(x = \"Outcome of Bechdel Test\", y = \"Number of movies\")\n\n\n\n\n\n\n\n\n\nSummarize the visualization: what did you learn about the distribution of the `clean_test` variable?    \n\n\nSolution\nAmong the categories, the “ok” category was most frequent. However, among those movies that did not pass the test, most of them did not pass because the women in the movie did not talk.\n\n\nLet's return to our research question: What percent of movies in the sample pass the Bechdel test? Among those that fail the test, in which way do they fail? \n\n\nSolution\n\ntable(bechdel$binary)\n## \n## FAIL PASS \n##  991  803\n803/(991 + 803)\n## [1] 0.4476031\n\n\ntable(bechdel$clean_test)[1:4]/991\n## \n##   nowomen    notalk       men   dubious \n## 0.1422805 0.5186680 0.1957619 0.1432896\n\n\nQuantitative univariate visualization\nTo motivate quantitative visualizations, consider a second research question\n\nAmong the movies in our sample, what’s the range of budgets? What’s the typical budget? The largest/smallest?\n\nWe can answer the above research question by exploring the quantitative budget_2013 variable. Quantitative variables require different summary tools than categorical variables. We’ll explore two methods for graphing quantitative variables: histograms and density plots. Both of these has strengths/weaknesses in helping us visualize the distribution of observed values.\nIn their examination, keep your eyes on the following.\n\n\ncenter: Where’s the center of the distribution? What’s a typical value of the variable?\n\nvariability: How spread out are the values? A lot or a little?\n\nshape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?\n\n\noutliers: Are there any outliers, ie. values that are unusually large/small relative to the bulk of other values?\n\n\ncontextual implications: Interpret these features in the context of your research. How would you describe your findings to a broad audience?\n\nHistograms\nHistograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin.\n\nTry out the code below.  At each step determine how each piece of code contributes to the plot.    \n\n\n\n# plot 1: set up a plotting frame\nggplot(bechdel, aes(x = budget_2013))\n\n# plot 2: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram()\n\n# plot 3: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram() +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 4: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 5: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(fill = \"white\") +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 6: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\", binwidth = 500000) +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 7: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\", binwidth = 200000000) +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\nSolution\n\n# plot 1: set up a plotting frame\nggplot(bechdel, aes(x = budget_2013))\n\n# plot 2: Added bars the represent the count of movies within budget intervals\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram()\n\n# plot 3: Updated the text on the x and y axis labels\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram() +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 4: The outline of the bars is now white\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 5: The fill of the bars is now white\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(fill = \"white\") +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 6: The width of the interval or bin is decreased to $500,000\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\", binwidth = 500000) +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n# plot 7: The width of the interval or bin is increased to $200,000,000\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_histogram(color = \"white\", binwidth = 200000000) +\n  labs(x = \"Budget ($)\", y = \"Number of movies\")\n\n\n\nSummarize the visualizations.    \n  \n  a. Describe the problem in choosing a bin width that's not too wide and not too narrow, but just right.    \n  b. What did you learn about the distribution of the `budget_2013` variable?    \n  c. Why does adding `color = \"white\"` improve the visualization?\n\n\nSolution\n\nIf the intervals (bars, bins) are too wide, then we lose information about the variation in the budget. Take it to the extreme with just 1 bar with the bar ranging from the minimum to the maximum. If the intervals are too small, then we have the frequency of the bars go up and down quite a bit. We might say that the shape of the bars isn’t very smooth.\nMost of the movies have small budgets; the majority less of budgets are less than $100,000,000 (in 2013 dollars) but there are some movies with upwards of $300,000,000 (in 2013 dollars).\nAdding the white outline to the bars adds contrast and helps the viewer see where each bar starts and ends.\n\nDensity plots\nDensity plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range.\n\nTry the following code and assess what each line does.\n\n\n\n# plot 1: set up the plotting frame\nggplot(bechdel, aes(x = budget_2013))\n\n# plot 2: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density()\n\n# plot 3: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density() +\n  labs(x = \"Budget ($)\")\n\n# plot 4: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density(color = \"red\") +\n  labs(x = \"Budget ($)\")\n\n# plot 5: what changed / how did we change it?\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density(fill = \"red\") +\n  labs(x = \"Budget ($)\")\n\nSolution\n\n# plot 1: set up the plotting frame\nggplot(bechdel, aes(x = budget_2013))\n\n# plot 2: add a smooth curve (shape of the histogram)\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density()\n\n# plot 3: updated the x axis label\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density() +\n  labs(x = \"Budget ($)\")\n\n# plot 4: changed the color of the curve to red\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density(color = \"red\") +\n  labs(x = \"Budget ($)\")\n\n# plot 5: filled the area under the curve to be red\nggplot(bechdel, aes(x = budget_2013)) +\n  geom_density(fill = \"red\") +\n  labs(x = \"Budget ($)\")\n\n\nThe histogram and density plot both allow us to visualize the distribution of a quantitative variable.  What are the pros/cons of each?  Discuss.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#practice",
    "href": "src/02-Intro_Data_Viz.html#practice",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "Practice",
    "text": "Practice\n\nIn July 2016, fivethirtyeight.com published the article [\"Hip-Hop is Turning on Donald Trump\"\"](https://projects.fivethirtyeight.com/clinton-trump-hip-hop-lyrics/).  You can find the supporting data table `hiphop_cand_lyrics` in the `fivethirtyeight` package:    \n  \n\n\nlibrary(fivethirtyeight)\ndata(hiphop_cand_lyrics)\n\n\nWhat are the cases in this data set?\n\nUse RStudio functions to:\n\n\n\nsummarize the number of cases in hiphop_cand_lyrics\n\nexamine the first cases of hiphop_cand_lyrics\n\nlist out the names of all variables in hiphop_cand_lyrics\n\n\n\nLet's start our investigation of hip hop data by asking \"Who?\"; that is, let's identify patterns in which 2016 presidential candidates popped up in hip hop lyrics.    \n  \n  a. Use an RStudio function to determine the category labels used for the `candidate` variable.    \n  b. Use `table` to construct a table of the number of cases that fall into each `candidate` category.    \n  c. Construct a single plot that allows you to investigate the prevalence of each candidate in hip hop.  Make the following modifications:    \n    - change the axis labels    \n    - change the fill colors    \n  d. Summarize your findings about the 2016 candidates in hip hop.\n        \n\n\nNext, consider the release dates of the hip hop songs.    \n  \n  a. Construct a histogram of the release dates with the following modifications:    \n    - change the fill color of the bins    \n    - change the bin width to a meaningful size    \n  b. Construct a density plot of the release dates with the following modifications:    \n    - change the fill color    \n  c. Summarize your findings about release date\n\n\n\nNo class will teach you everything you need to know about RStudio or programming in general. Thus, being able to find help online is an important skill.  To this end, make a single visualization that incorporates the following modifications to your density plot from above.  This will require a little Googling and/or use of the visualization cheat sheet.    \n\n  - Add a title or caption.    \n  - Add *transparency* to the fill color.    \n  - Calculate the mean (ie. average) release date and median release date:\n\n\n\nmean(hiphop_cand_lyrics$album_release_date)\nmedian(hiphop_cand_lyrics$album_release_date)\n\nAdd two vertical lines to your plot: one representing the mean and the other representing the median. Use two different colors and/or line types.\n\nChange the limits of the x-axis to range from 1980-2020.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/02-Intro_Data_Viz.html#appendix-r-functions",
    "href": "src/02-Intro_Data_Viz.html#appendix-r-functions",
    "title": "\n2  Intro to Data Visualization\n",
    "section": "Appendix: R Functions",
    "text": "Appendix: R Functions\nBasic R functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\ntable(x)\nFrequency count of categories in x\ntable(bechdel$clean_test)\n\n\nmean(x)\nAverage or mean of numeric values in x\nmean(bechdel$budget_2013)\n\n\nmedian(x)\nMedian of numeric values in x\nmedian(bechdel$budget_2013)\n\n\nggplot2 foundation functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nggplot(data)\nCreate a blank canvas that can create a visualization based on data\nggplot(data = bechdel)\n\n\nggplot(data,aes())\nCreate a blank canvas that can create a visualization based on data with aesthetic mapping\nggplot(data = bechdel, aes(x = budget_2013))\n\n\n+ geom_bar(aes(x))\nAdd a bar plot\ngeom_bar(aes(x = clean_test))\n\n\n+ geom_point(aes(x,y))\nAdd a scatterplot\ngeom_bar(aes(x = year,y=budget_2013))\n\n\n+ geom_histogram(aes(x))\nAdd a histogram\ngeom_histogram(aes(x = budget_2013))\n\n\n+ geom_density(aes(x))\nAdd a density plot\ngeom_density(aes(x = budget_2013))\n\n\nmore ggplot2 functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\n+ xlab()\nAdd an label for the x-axis\nxlab('X axis')\n\n\n+ ylab()\nAdd an label for the y-axis\nylab('Y axis')\n\n\n+ labs(x,y)\nAdd labels for the x and y-axis\nlabs(y = 'Y axis', x = 'X axis')\n\n\n+ scale_color_manual()\nSet a color palette for the color aesthetic\nscale_color_manual(values = c('blue','red'))\n\n\n+ facet_grid()\nCreate subplots based on categorical variables, groupvar_along_yaxis ~ groupvar_along_xaxis\n+ facet_grid(. ~ smoker)\n\n\nggplot2 aesthetic mapping options\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nx\nvariable for x-axis\naes(x = clean_test)\n\n\ny\nvariable for y-axis\naes(y = budget_2013)\n\n\ncolor\nvariable for colors of points or strokes/outline\naes(color = clean_test)\n\n\nfill\nvariable for fill of bars or shapes\naes(fill = clean_test)\n\n\nsize\nvariable for size shapes\naes(size = budget_2013)\n\n\nshape\nvariable for shape type\naes(shape = clean_test)",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to Data Visualization</span>"
    ]
  },
  {
    "objectID": "src/03-Effective_Viz.html",
    "href": "src/03-Effective_Viz.html",
    "title": "\n3  Effective Visualizations\n",
    "section": "",
    "text": "Learning Goals\nYou can download a template .Rmd of this activity here. Put the file in a Assignment_03 folder within your COMP_STAT_112 folder.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Effective Visualizations</span>"
    ]
  },
  {
    "objectID": "src/03-Effective_Viz.html#learning-goals",
    "href": "src/03-Effective_Viz.html#learning-goals",
    "title": "\n3  Effective Visualizations\n",
    "section": "",
    "text": "Understand and apply the guiding principles of effective visualizations",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Effective Visualizations</span>"
    ]
  },
  {
    "objectID": "src/03-Effective_Viz.html#effective-visualizations",
    "href": "src/03-Effective_Viz.html#effective-visualizations",
    "title": "\n3  Effective Visualizations\n",
    "section": "Effective Visualizations",
    "text": "Effective Visualizations\nBenefits of Visualizations\nVisualizations help us understand what we’re working with:\n\nWhat are the scales of our variables?\n\nAre there any outliers, i.e. unusual cases?\n\nWhat are the patterns among our variables?\n\nThis understanding will inform our next steps:\n\nWhat method of analysis / model is appropriate?\n\nOnce our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story.\nAnalysis of Graphics\nThere is not one right way to visualize a data set.\nHowever, there are guiding principles that distinguish between “good” and “bad” graphics.\nOne of the best ways to learn is by reading graphics and determining which ways of arranging thing are better or worse. So before jumping directly into theoretical principles, let’s try some critical analysis on specific examples.\n\nFor your assigned graphics or sets of graphics, identify the following:\n\n1. the story the graphic is aiming to communicate to the audience\n2. effective features of the graphic\n3. areas for improvement\n\n\n\n\n\nSource: http://viz.wtf/\n\n\n\n\n\n\n\n\nSource: N. Yau, Visualize This, 2011, p. 223-225.\n\n\n\n\n\n\n\n\nSource: N. Yau, Visualize This, 2011, p. 242.\n\n\n\n\n\n\n\n\nGun deaths.\n\n\n\n\n\n\n\n\nSource: N. Yau, Visualize This, 2011, p. 150.\n\n\n\n\n\n\n\n\nSource: C. N. Knaflic, Storytelling with Data, 2015, p. 142.\n\n\n\n\n\n\n\n\nSource: S. Few, Now You See It, 2009, p. 45.\n\n\n\n\n\n\n\n\nClimate change.\n\n\n\n\n\n\n\n\nSource: C. N. Knaflic, Storytelling with Data, 2015, p. 48.\n\n\n\n\n\n\n\n\nDiamond data visualizations from R for Data Science, 2017\n\n\n\n\n\nDiamond data visualizations from R for Data Science, 2017\n\n\n\n\n\nDiamond data visualizations from R for Data Science, 2017\n\n\n\n\n\nDiamond data visualizations from R for Data Science, 2017\n\n\n\n\n\nDiamond data visualizations from R for Data Science, 2017\n\n\n\n\n\n\n\n\nSource: S. Few, Now You See It, 2009, p. 37.\n\n\n\n\n\n\n\n\nSource: N. Yau, Visualize This, 2011, p. 249.\n\n\n\n\n\n\n\n\nSource: S. Few, Now You See It, 2009, p. 61.\n\n\n\n\n\n\n\n\nSource: C. N. Knaflic, Storytelling with Data, 2015, p. 68.\n\n\n\n\n\n\n\n\nSource: C. N. Knaflic, Storytelling with Data, 2015, p. 81.\n\n\n\n\n\n\n\n\nSource: http://viz.wtf/\n\n\n\n\n\n\n\n\nSource: A. Cairo, The Functional Art, 2013, p. 340.\n\n\n\n\n\n\n\n\nSource: N. Yau, Visualize This, 2011, p. 220.\n\n\n\n\nMore examples:\n\nFlowingData: blog and Best visualizations of 2016\n\nWTF Visualizations\nProperties of Effective Visualizations\nStorytelling / Context\nRemember …\n\nGraphics are designed by the human expert (you!) in order to reveal information that’s in the data.\n\nYour choices depend on what information you want to reveal and convey. So before you complete a graphic, you should clearly identify what story you want the graphic to tell to the audience, and double check that this story is being told.1\nHere is a nice example from FiveThirtyEight where each chart tells a story in answer to a particular question about the [then] upcoming German election.\nHere is an interactive visualization that tells a story about gun violence.\nAnother important contextual question to ask is whether the graphic is for an explanatory (explain why) or exploratory (discovering something new) analysis.\nAccessibility\nIn addition to considering the story you are telling, you need to consider what audiences can access your story.\nAlternative (Alt) Text: In order for data visualizations to be accessible to people who are blind and use screen readers, we can provide alt text. Alt text should concisely articulate (1) what your visualization is (e.g. a bar chart showing which the harvest rate of cucumbers), (2) a one sentence description of the what you think is the most important takeaway your visualization is showing, and (3) a link to your data source if it’s not already in the caption (check out this great resource on writing alt text for data visualizations).\nTo add the alt text to your the HTML created from knitting the Rmd, you can include it as an option at the top of your r chunk. For example: {r, fig.alt = “Bar chart showing the daily harvest of cucumbers. The peak cucumber collection day is August 18th”}. To see the alt text in the knitted html file, you can hover over the image.\nColor-blind friendly color palettes: In order for data visualizations to be accessible to people with color blindness, we need to be thoughtful about the colors we use in our data visualizations. The most common variety of color-blindness makes it hard for individuals to detect differences between red and green. Some types make it hard detect differences between blue and yellow. Other types make it hard to see different shades of a color.\nThis Chromatic Vision Simulator can give you a sense of how this could impact your perception of colors (see image below). You could also upload a visualization to this simulator to see how well your chosen color palette works.\n\n\n\n\n\n\n\n\nTry to use a color-blind friendly / safe palette whenever possible. One easy way to do this is to include + scale_fill_viridis_d() or + scale_color_viridis_d() when you are filling or coloring by a discrete or categorical variable and + scale_fill_viridis_c() or + scale_color_viridis_c() when you are filling or coloring by a continuous or quantitative variable. There are many other color-blind friendly palettes in R; you can check out other resources here.\nEthics\nMichael Correll of Tableau Research writes “Data visualizations have a potentially enormous influence on how data are used to make decisions across all areas of human endeavor.” in his article from 2018.\nVisualization operates at the intersection of science, communication, and data science & statistics. There are professional standards of ethics in these fields of the power they hold over other people as it relates to making data-driven decisions.\nCorrell describes three ethical challenges of visualization work:\n\n\nVisibility Make the invisible visible\n\n\nVisualize hidden labor\nVisualize hidden uncertainty\nVisualize hidden impacts\n\nVisualizations can be complex and one must consider the accessibility of the visualization to the audience. Managing complexity is, therefore, a virtue in design that can be in direct opposition with the desire to visualize the invisible.\n\n\nPrivacy Collect data with empathy\n\n\nEncourage Small Data\nAnthropomorphize data\nObfuscate data to protect privacy\n\nRestricting the type and amount of data that is collected has a direct impact on the quality and scope of the analyses hence obligation to provide context, and analytical power can, therefore, stand in direct opposition to the empathic collection of data.\n\n\nPower Challenge structures of power\n\n\nSupport data due process.\nAct as data advocates.\nPressure unethical analytical behavior.\n\nThe goal of promoting truth and suppressing falsehood may require amplifying existing structures of expertise and power, and suppressing conflicts for the sake of rhetorical impact.\nAt a minimum, you should always\n\nPresent data in a way that avoids misleading the audience.\nAlways include your data source. Doing so attributes credit for labor, provides credibility to your work, and provides context for your graphic.\nDesign\nA basic principle is that a graphic is about comparison. Good graphics make it easy for people to perceive things that are similar and things that are different. Good graphics put the things to be compared “side-by-side,” that is, in perceptual proximity to one another. The following aesthetics are listed in roughly descending order of human ability to perceive and compare nearby objects:2\n\nPosition\nLength\nAngle\nDirection\nShape (but only a very few different shapes)\nArea\nVolume\nShade\nColor\n\nColor is the most difficult, because it is a 3-dimensional quantity. We are pretty good at color gradients, but discrete colors must be selected carefully. We need to be particularly aware of red/green color blindness issues.\nVisual perception and effective visualizations\nHere are some facts to keep in mind about visual perception from Now You See It:\n\nVisual perception is selective, and our attention is often drawn to constrasts from the norm.\n\n\n\n\n\nOur attention is drawn to contrasts to the norm. What stands out in this example image?, which is originally from C. Ware, Information Visualization: Perception for Design, 2004? Source: S. Few, Now You See It, 2009, p. 33.\n\n\n\n\nImplication: We should design visualizations so that the features we want to highlight stand out in contrast from those that are not worth the audience’s attention.\n\n\nOur eyes are drawn to familiar patterns. We see what we know and expect.\n\n\n\n\n\nDo you see anything embedded in this rose image from coolbubble.com? Source: S. Few, Now You See It, 2009, p. 34.\n\n\n\n\nImplication: Visualizations work best when they display information as patterns that familiar and easy to spot.\n\n\nMemory plays an important role in human cognition, but working memory is extremely limited.\n\n\nImplication: Visualizations must serve as external aids to augment working memory. If a visualization is unfamiliar, then it won’t be as effective.\n\nGestalt principles\nThe Gestalt principles (more info here or here) were developed by psychologists including Max Wertheimer in the early 1900s to explain how humans perceive organized patterns and objects.\nIn a design setting, they help us understand how to incorporate preattentive features into visualizations. The figure below shows some preattentive features, all of which are processed prior to conscious attention (“at a glance”) and can help the reader focus on relevant information in a visualization.\n\n\n\n\nPreattentive features based on the Gestalt principles. Source: I. Meirelles, Design for Information, 2013, p. 23.\n\n\n\nOther design tips from Visualize This and Storytelling with Data:\n\nPut yourself in a reader’s shoes when you design data graphics. What parts of the data need explanation? We can minimize ambiguity by providing guides, label axes, etc.\nData graphics are meant to shine a light on your data. Try to remove any elements that don’t help you do that. That is, eliminate “chart junk” (distracting and unnecessary adornments).\nVary color and stroke styles to emphasize the parts in your graphic that are most important to the story you’re telling\nIt is easier to judge length than it is to judge area or angles\nBe thoughtful about how your categories (levels) are ordered for categorical data. There may be a natural ordering\nPie charts, donut charts, and 3D are evil\nBasic Rules for Constructing Graphics\nInstead of memorizing which plot is appropriate for which situation, it’s best to simply start to recognize patterns in constructing graphics:\n\nEach quantitative variable requires a new axis.\n\nEach categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping).\nFor visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency.\nStill to Come\nWhile we will not cover all of visualization theory – you can take a whole course on that at Macalester and it is a proper field in its own right – we will touch on the following types of visualizations in the coming weeks:\n\nBivariate visualizations\nVisualizations of higher dimensional data\nTemporal structures: timelines and flows\nHierarchical structures: trees\nRelational structures: networks\nSpatial structures: maps\nSpatio-temporal structures\nTextual structures\nInteractive graphics (e.g., gganimate, shiny)",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Effective Visualizations</span>"
    ]
  },
  {
    "objectID": "src/03-Effective_Viz.html#practice",
    "href": "src/03-Effective_Viz.html#practice",
    "title": "\n3  Effective Visualizations\n",
    "section": "Practice",
    "text": "Practice\n\nConsider one of the more complicated data graphics listed at (http://mdsr-book.github.io/exercises.html#exercise_25):\n\na. What story does the data graphic tell? What is the main message that you take away from it?\nb. Can the data graphic be described in terms of the Grammar of Graphics (frame, glyphs, aesthetics, facet, scale, guide)? If so, please describe.\nc. Critique and/or praise the visualization choices made by the designer. Do they work? Are they misleading? Thought-provoking? Brilliant? Are there things that you would have done differently? Justify your response.\n\n\nSolution\nExample: http://hint.fm/wind/\n\nThe dynamic visual shows the chaos and beauty of the wind. Since the graphic is updated regularly, the exact wind patterns will be different so the overall message is that there is an interesting relationship between topography and wind with a large amount of uncertainty and chaos.\nframe: longitude (x) and latitude (y); glyph: paths/lines, geography boundaries (lower 48 states), circles for cities, text for city names; aesthetics: white color of paths/lines, speed of animation path/line, size of white city circles corresponds to population, dark grey color for geographic polygon boundary, white outlined black text of city names; no facets; guide for speed of animation of paths, no guide for city circle size.\nSince the graphic is only for one time and date, you can’t compare how the patterns change over time. It would be interesting to include elevation in the background map to see how the wind patterns are impacted by the topography.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Effective Visualizations</span>"
    ]
  },
  {
    "objectID": "src/03-Effective_Viz.html#footnotes",
    "href": "src/03-Effective_Viz.html#footnotes",
    "title": "\n3  Effective Visualizations\n",
    "section": "",
    "text": "A “negative” result (e.g., there is no correlation between two variables) is a perfectly fine story to tell.↩︎\nThis list is from B. S. Baumer, D. T. Kaplan, and N. J. Horton, Modern Data Science with R, 2017, p. 15. For more of the theory of perception, see also W.S. Cleveland and R. McGill, “Graphical perception: Theory, experimentation, and application to the development of graphical methods,” Journal of the American Statistical Association, 1984.↩︎",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Effective Visualizations</span>"
    ]
  },
  {
    "objectID": "src/04-Bivariate_Viz.html",
    "href": "src/04-Bivariate_Viz.html",
    "title": "\n4  Bivariate Visualizations\n",
    "section": "",
    "text": "Learning Goals\nYou can download a template .Rmd of this activity here. Put the file in the existing Assignment_03 folder within your COMP_STAT_112 folder.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/04-Bivariate_Viz.html#learning-goals",
    "href": "src/04-Bivariate_Viz.html#learning-goals",
    "title": "\n4  Bivariate Visualizations\n",
    "section": "",
    "text": "Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative)\nCreate basic bivariate visualizations based on real data",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/04-Bivariate_Viz.html#alterative-text-for-visualizations",
    "href": "src/04-Bivariate_Viz.html#alterative-text-for-visualizations",
    "title": "\n4  Bivariate Visualizations\n",
    "section": "Alterative Text for Visualizations",
    "text": "Alterative Text for Visualizations\nYou should write alt text for every visualization to create.\nFrom the last activity: Alt text should concisely articulate (1) what your visualization is (e.g. a bar chart showing which the harvest rate of cucumbers), (2) a one sentence description of the what you think is the most important takeaway your visualization is showing, and (3) a link to your data source if it’s not already in the caption (check out this great resource on writing alt text for data visualizations).\nTo add the alt text to your the HTML created from knitting the Rmd, you can include it as an option at the top of your R chunk. For example: {r, fig.alt = “Bar chart showing the daily harvest of cucumbers. The peak cucumber collection day is August 18th”}. In this activity, there will be prompts in the template Rmd but you should try to continue doing this for future assignments.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/04-Bivariate_Viz.html#bivariate-visualizations",
    "href": "src/04-Bivariate_Viz.html#bivariate-visualizations",
    "title": "\n4  Bivariate Visualizations\n",
    "section": "Bivariate Visualizations",
    "text": "Bivariate Visualizations\nThe outcome of the 2016 presidential election surprised many people. In this activity we will analyze data from the 2016 presidential election. To better understand it ourselves, we’ll explore county-level election outcomes and demographics. The data set, prepared by Alicia Johnson, combines 2008/2012/2016 county-level election returns from Tony McGovern on github, county-level demographics from the df_county_demographics data set within the choroplethr R package, and red/purple/blue state designations from http://www.270towin.com/.\nGetting to know the dataset\n\nBegin by loading the [election data](data/electionDemographics16.csv) from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\" and getting to know the data. Write out R functions to get to know the data using the prompts below to guide you.\n\n\n# Load data from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\"\nelect &lt;- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\")\n\n# Check out the first rows of elect.  What are the units of observation?\n\n\n# How much data do we have?\n\n\n# What are the names of the variables?\n\n\nSolution\n\n# Load data from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\"\nelect &lt;- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\")\n## Error in open.connection(structure(4L, class = c(\"curl\", \"connection\"), conn_id = &lt;pointer: 0x0000000000000266&gt;), : Recv failure: Connection was reset\n\n# Check out the first rows of elect.\n# The units of observation are county election results\n#  The variables are county name, vote counts for parties and total for presidential elections, and more\nhead(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n# There are 3,112 counties and 34 variables\ndim(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n# See the long list below\nnames(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n\n\nExplore the win column:\n    The `winrep_2016` variable indicates whether or not the Republican (Trump) won the county in 2016, thus is *categorical*.  Let's construct both numerical and visual summaries of Trump wins/losses.  (Before you do, what do you anticipate?) \n\n\n# Construct a table (a numerical summary) of the number of counties that Trump won/lost\ntable(xxx) # fill in the xxx\n\n# Attach a library needed for ggplots\nlibrary(xxx)\n\n# Construct a bar chart (a visual summary) of this variable.\nggplot(xxx, aes(xxx)) +\n  geom_xxx()\n\n\nSolution\n\n# Construct a table (a numerical summary) of the number of counties that Trump won/lost\ntable(elect$winrep_2016)\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n# Attach a library needed for ggplots\nlibrary(ggplot2)\n\n\n# Construct a bar chart (a visual summary) of this variable.\nggplot(elect, aes(x = winrep_2016)) +\n  geom_bar()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n\n\nThe `perrep_2016` variable includes a bit more detail about Trump's support in each county.    \n\n\n\nSince it’s quantitative we need different tools to visually explore the variability in perrep_2016. To this end, construct & interpret both a histogram and density plot of perrep_2016. (Before you do, what do you anticipate?)\n\n\n# histogram\nggplot(elect, aes(xxx)) +\n  geom_xxx(color = \"white\")\n\n# density plot\nggplot(elect, aes(xxx)) +\n  geom_xxx()\n\n\nSolution\n\n# histogram\nggplot(elect, aes(x = perrep_2016)) +\n  geom_histogram(color = \"white\")\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n# density plot\nggplot(elect, aes(x = perrep_2016)) +\n  geom_density()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nThe vast majority of counties in the U.S. had a Republican majority vote (&gt; 50%) within that county.\n\nThus far, we have a good sense for how Trump’s support varied from county to county. We don’t yet have a good sense for why. What other variables (ie. county features) might explain some of the variability in Trump’s support from county to county? Which of these variables do you think will be the best predictors of support? The worst?\n\n\nSolution\n\nMaybe past election history and information about the people that live there and the social culture and values. Let’s see…\nBackground on visualizing relationships\nWe’ve come up with a list of variables that might explain some of the variability in Trump’s support from county to county. Thus we’re interested in the relationship between:\n\n\nresponse variable: the variable whose variability we would like to explain (Trump’s percent of the vote)\n\n\npredictors: variables that might explain some of the variability in the response (percent white, per capita income, state color, etc)\n\nOur goal is to construct visualizations that allow us to examine/identify the following features of the relationships among these variables:\n\nrelationship trends (direction and form)\n\nrelationship strength (degree of variability from the trend)\n\n\noutliers in the relationship\n\nBefore constructing visualizations of the relationship among any set of these variables, we need to understand what features these should have. As with univariate plots, the appropriate visualization also depends upon whether the variables are quantitative or categorical.\nRecall some basic rules in constructing graphics:\n\nEach quantitative variable requires a new axis. (We’ll discuss later what to do when we run out of axes!)\n\nEach categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping)\n\nFor visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency.\n\n\nConsider a subset  of the variables: \n\n\n\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nError in eval(expr, envir, enclos): object 'fd' not found\n\n\nIn groups, sketch on paper a mock-up of a visualization of the relationship between the given pair of variables (i.e., what type of chart is appropriate to demonstrate the relationship?):\n\nThe relationship between perrep_2016 (the response) and perrep_2012 (the predictor).\nThe relationship between perrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below density plot of perrep_2016 to distinguish between counties in red/purple/blue states?\n\n\nggplot(elect, aes(x = perrep_2016)) +\n  geom_density()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n\nThe relationship between Trump’s county-levels wins/losses winrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below bar plot of winrep_2016 to distinguish between counties in red/purple/blue states?\n\n\nggplot(elect, aes(x = winrep_2016)) +\n  geom_bar()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nVisualizing quantitiative vs quantitative relationships\nLet’s start by exploring the relationship between Trump’s 2016 support (perrep_2016) and Romney’s 2012 support (perrep_2012), both quantitative variables.\n\nBoth `perrep_2016` and `perrep_2012` are quantitative, thus require their own axes.  Traditionally, the response variable (what we are trying to predict or explain) is placed on the y-axis.  Once the axes are set up, each case is represented by a \"glyph\" at the coordinates defined by these axes.    \n\n\n\nMake a scatterplot of perrep_2016 vs perrep_2012 with different glyphs: points or text.\n\n\n# just a graphics frame\nggplot(elect, aes(y = perrep_2016, x = perrep_2012))\n\n# add a layer with \"point\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point()\n\n# add a layer with symbol glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(shape = 3)\n\n# add a layer with \"text\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_text(aes(label = abb))\n\n\nSolution\n\n# just a graphics frame\nggplot(elect, aes(y = perrep_2016, x = perrep_2012))\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n# add a layer with \"point\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n# add a layer with symbol glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(shape = 3)\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n# add a layer with \"text\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_text(aes(label = abb))\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n\n\nSummarize the relationship between the Republican candidates’ support in 2016 and 2012. Be sure to comment on:\n- the strength of the relationship (weak/moderate/strong)\n- the direction of the relationship (positive/negative)\n- outliers (In what state do counties deviate from the national trend? Explain why this might be the case)\n\n\nSolution\nThere is a strong positive relationship between the Republican support from 2012 to 2016, meaning that if a county highly favors a Republican candidate in 2012, they were likely to highly favor a Republican in 2016. Counties in Utah seems to not quite follow this pattern with lower support in 2016 than what you’d expect given the support in 2012. This is because the 2012 candidate was from Utah (data context!).\n\n\nThe trend of the relationship between `perrep_2016` and `perrep_2012` is clearly positive and (mostly) linear.  We can highlight this trend by adding a model \"smooth\" to the plot.    \n\n\n\nAdd a layer with a model smooth:\n\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth()\n\n\nSolution\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n \n\nConstruct a new plot that contains the model smooth but does not include the individual cases (eg: point glyphs).\n\n\nSolution\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_smooth()\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n\n\nNotice that there are gray bands surrounding the blue model smooth line. What do these gray bars illustrate/capture and why are they widest at the “ends” of the model?\n\n\nSolution\n\nThere are fewer data points at the “ends” so there is more uncertainty about the relationship.\n\nBy default, geom_smooth adds a smooth, localized model line. To examine the “best” linear model, we can specify method=\"lm\":\n\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\nSolution\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n\nAs with univariate plots, we can change the aesthetics of scatterplots.    \n\n\n\nAdd appropriate axis labels to your scatterplot. Label the y-axis “Trump 2016 support (%)” and label the x-axis “Romney 2012 support (%)”.\n\nChange the color of the points.\n\nAdd some transparency to the points. NOTE: alpha can be between 0 (complete transparency) and 1 (no transparency).\n\nWhy is transparency useful in this particular graphic?\n\n\nSolution\n\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(color = \"red\", alpha = 0.1) +\n  labs(x = \"Romney 2012 support (%)\", y = \"Trump 2016 support (%)\") + \n  theme_classic()\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\n\n\n2012 results aren't the only possible predictor of 2016 results.  Consider two more possibilities.    \n\n\n\nConstruct a scatterplot of perrep_2016 and median_rent. Summarize the relationship between these two variables.\n\nConstruct a scatterplot of perrep_2016 and percent_white. Summarize the relationship between these two variables.\n\nAmong perrep_2012, median_rent and percent_white, which is the best predictor of perrep_2016? Why?\nVisualizing quantitative vs. categorical relationships\nConsider a univariate histogram and density plot of perrep_2016:\n\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nError in eval(expr, envir, enclos): object 'g1' not found\n\n\nTo visualize the relationship between Trump’s 2016 support (perrep_2016) and the StateColor (categorical) we need to incorporate a grouping mechanism. Work through the several options below.\n\nWe can show density plots for each state color next to each other:\n\n\nConstruct a density plot for each group.\n\n\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density()\n\n\nNotice that ggplot randomly assigns colors to group based on alphabetical order. In this example, the random color doesn’t match the group itself (red/purple/blue)! We can fix this:\n\n\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\nThe overlap between the groups makes it difficult to explore the features of each. One option is to add transparency to the density plots:\n\n\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\nYet another option is to separate the density plots into separate “facets” defined by group:\n\n\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ StateColor)\n\n\nLet's try a similar strategy using histograms to illustrate the relationship between `perrep_2016` and `StateColor`.    \n\n\nStart with the default histogram:\n\n\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\ngeom_histogram(color = \"white\")\n\n\nThat’s not very helpful! Separate the histograms into separate facets for each StateColor group.\n\n\nDensity plots and histograms aren't the only type of viz we might use...    \n\n\nConstruct side-by-side violins and side-by-side boxplots (see description below).\n\n\n# violins instead\nggplot(elect, aes(y = perrep_2016, x = StateColor)) +\n  geom_violin()\n\n# boxes instead\nggplot(elect, aes(y = perrep_2016, x = StateColor)) +\n  geom_boxplot()\n\nBox plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable:\n\n\nError in knitr::include_graphics(\"images/Boxplot.png\"): Cannot find the file(s): \"images/Boxplot.png\"\n\n\n\nIn the future, we’ll typically use density plots instead of histograms, violins, and boxes. Explain at least one pro and one con of the density plot.\n\n\nLet's not forget the most important purpose of these visualizations!  Summarize the relationship between Trump's 2016 county-level support among red/purple/blue states.  \n\n\nVisualizing categorical vs categorical relationships\nFinally, suppose that instead of Trump’s percentage support, we simply want to explore his county-level wins/losses:\n\n\nError in eval(expr, envir, enclos): object 'elect' not found\n\n\nSpecifically, let’s explore the relationship between winrep_2016 and StateColor, another categorical variable.\n\nWe saw above that we can incorporate a new categorical variable into a visualization by using grouping features such as color or facets.  Let's add information about `StateColor` to our bar plot of `winrep_2016`.    \n\n\n\n\nConstruct the following 4 bar plot visualizations.\n::: {.cell}\n# a stacked bar plot\nggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n  geom_bar()\n\n# a side-by-side bar plot\nggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n  geom_bar(position = \"dodge\")\n\n# a proportional bar plot\nggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n  geom_bar(position = \"fill\")\n\n# faceted bar plot\nggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n  geom_bar() +\n  facet_wrap(~winrep_2016)\n:::\n\nName one pro and one con of using the “proportional bar plot” instead of one of the other three options.\nWhat’s your favorite bar plot from part (a)? Why?\nPractice\nHot Dogs\nIn the annual Nathan’s hot dog eating contest, people compete to eat as many hot dogs as possible in ten minutes. Data on past competitions were compiled by Nathan Yau for “Visualize This: The FlowingData Guide to Design, Visualization, and Statistics”:\n\nhotdogs &lt;- read_csv(\"http://datasets.flowingdata.com/hot-dog-contest-winners.csv\")\n\n\nAddress the following:\n   \na. Construct a visualization of the winning number of hot dogs by year. THINK: Which is the response variable?      \nb. Temporal trends are often visualized using a line plot.  Add a `geom_line()` layer to your plot from part (a).       \nc. Summarize your observations about the temporal trends in the hot dog contest.    \n\n\n\nAll but two of the past winners are from the U.S. or Japan:\n\n\n\ntable(hotdogs$Country)\n\n\n      Germany         Japan        Mexico United States \n            1             9             1            20 \n\n\nUse the following code to filter out just the winners from U.S. and Japan and name this hotdogsSub. (Don’t worry about the code itself - we’ll discuss similar syntax later in the semester!)\n\nlibrary(dplyr)\nhotdogsSub &lt;- hotdogs %&gt;%\n  filter(Country %in% c(\"Japan\", \"United States\"))\n\n\nUsing a density plot approach without facets, construct a visualization of how the number of hot dogs eaten varies by country.\nRepeat part a using a density plot approach with facets.\n\nRepeat part a using something other than a density plot approach. (There are a few options!)\n\nSummarize your observations about the number of hot dogs eaten by country.\nThe Bechdel Test\nRecall the “Bechdel test” data from the previous activity. As a reminder, the “Bechdel test” tests whether movies meet the following criteria:\n\nthere are \\(\\ge\\) 2 female characters\n\nthe female characters talk to each other\n\nat least 1 time, they talk about something other than a male character\n\nIn the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package:\n\nlibrary(fivethirtyeight)\ndata(bechdel)\n\nIn investigating budgets and profits, the authors “focus on films released from 1990 to 2013, since the data has significantly more depth since then.” Use the following code to filter out just the movies in these years and name the resulting data set Beyond1990 (don’t worry about the syntax):\n\nlibrary(dplyr)\nBeyond1990 &lt;- bechdel %&gt;%\n  filter(year &gt;= 1990)\n\n\nAddress the following:\n  \na. Construct a visualization that addresses the following research question: Do bigger budgets (`budget_2013`) pay off with greater box office returns (`domgross_2013`)?  In constructing this visualization, add a smooth to highlight trends and pay attention to which of these variables is the response.       \nb. Using your visualization as supporting evidence, answer the research question.          \nc. Part of the fivethirtyeight article focuses on how budgets (`budget_2013`) differ among movies with different degrees of female character development (`clean_test`).  Construct a visualization that highlights the relationship between these two variables.  There are many options - some are better than others!       \nd. Using your visualization as supporting evidence, address fivethirtyeight's concerns.  \n\n\nNOTE: The following exercise is inspired by a similar exercise proposed by Albert Kim, one of the `fivethirtyeight` package authors.    \n    Return to the fivethirtyeight.com article and examine the plot titled \"The Bechdel Test Over Time\".    \n\n\nSummarize the trends captured by this plot. (How has the representation of women in movies evolved over time?)\n\nRecreate this plot from the article!\n\nTo do so, you’ll need to create a new data set named newbechdel in which the order of the Bechdel categories (clean_test) and the year categories (yearCat) match those used by fivethirtyeight. Don’t worry about the syntax:\n\nlibrary(dplyr)\nnewbechdel &lt;- bechdel %&gt;%\nmutate(clean_test = factor(bechdel$clean_test, c(\"nowomen\", \"notalk\", \"men\", \"dubious\", \"ok\"))) %&gt;%\nmutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))\n\nFurther, you’ll need to add the following layer in order to get a color scheme that’s close to that in the article:\n\nscale_fill_manual(values = c(\"red\", \"salmon\", \"pink\", \"steelblue1\", \"steelblue4\"))\n\nNOTE: that your plot won’t look exactly like the authors’, but should be close to this:\n\n\nError in knitr::include_graphics(\"images/bechdel_hist.jpeg\"): Cannot find the file(s): \"images/bechdel_hist.jpeg\"",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/04-Bivariate_Viz.html#appendix-r-functions",
    "href": "src/04-Bivariate_Viz.html#appendix-r-functions",
    "title": "\n4  Bivariate Visualizations\n",
    "section": "Appendix: R Functions",
    "text": "Appendix: R Functions\nData Wrangling R functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nfilter(data,condition)\nProvide rows of a data set that satisfy a condition\nbechdel %&gt;% filter(year &gt;= 1990)\n\n\nmutate(data,varname =)\nCreate a new variable\nbechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))\n\n\ncut(x,breaks)\nCut a quantitative variable into categories by the break points\nbechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))\n\n\nggplot2 foundation functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nggplot(data)\nCreate a blank canvas that can create a visualization based on data\nggplot(data = elect)\n\n\n+ geom_bar(aes(x))\nAdd a bar plot\ngeom_bar(aes(x = winrep_2016))\n\n\n+ geom_bar(aes(x,fill),position='fill')\nAdd a propotional bar plot\ngeom_bar(aes(x = winrep_2016,fill = StateColor),position='fill')\n\n\n+ geom_bar(aes(x,fill),position='dodge')\nAdd a side-by-side bar plot\ngeom_bar(aes(x = winrep_2016,fill = StateColor),position='dodge')\n\n\n+ geom_smooth(aes(x,y))\nAdd a smoothed average curve of scatterplot\ngeom_smooth()\n\n\n+ geom_smooth(aes(x,y),method='lm')\nAdd a best fit line to a scatterplot\ngeom_smooth(method='lm')\n\n\n+ geom_point(aes(x,y))\nAdd a scatterplot\ngeom_bar(aes(x = year,y=budget_2013))\n\n\n+ geom_text(aes(x,y,label))\nAdd a text to a plot\ngeom_text(aes(label=abb))\n\n\n+ facet_wrap(~x)\nFacet a plot (break into subplots based on groups)\nfacet_wrap(~StateColor)",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Bivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/05-Multivariate_Viz.html",
    "href": "src/05-Multivariate_Viz.html",
    "title": "\n5  Multivariate Visualizations\n",
    "section": "",
    "text": "Learning Goals\nYou can download a template .Rmd of this activity here. Put this in a new folder called Assignment_04 in your folder for COMP_STAT_112.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Multivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/05-Multivariate_Viz.html#learning-goals",
    "href": "src/05-Multivariate_Viz.html#learning-goals",
    "title": "\n5  Multivariate Visualizations\n",
    "section": "",
    "text": "Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot\nDevelop comfort with interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Multivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/05-Multivariate_Viz.html#adding-more-aesthetic-attributes",
    "href": "src/05-Multivariate_Viz.html#adding-more-aesthetic-attributes",
    "title": "\n5  Multivariate Visualizations\n",
    "section": "Adding More Aesthetic Attributes",
    "text": "Adding More Aesthetic Attributes\nExploring SAT Scores\nThough far from a perfect assessment of academic preparedness, SAT scores have historically been used as one measurement of a state’s education system. The education data contain various education variables for each state:\n\neducation &lt;- read.csv(\"https://bcheggeseth.github.io/112_spring_2023/data/sat.csv\")\n\n\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\nA codebook is provided by Danny Kaplan who also made these data accessible:\n\n\nError in knitr::include_graphics(\"images/SATcodebook.png\"): Cannot find the file(s): \"images/SATcodebook.png\"\n\n\nTo examine the variability in average SAT scores from state to state, let’s start with a univariate density plot:\n\nggplot(education, aes(x = sat)) +\n  geom_density(fill = \"blue\", alpha = .5) + \n  theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\nThe first question we’d like to answer is to what degree do per pupil spending (expend) and teacher salary explain this variability? We can start by plotting each against sat, along with a best fit linear regression model:\n\nggplot(education, aes(y = sat, x = salary)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = \"lm\") + \n  theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\nggplot(education, aes(y = sat, x = expend)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = \"lm\") + \n  theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\n\nIs there anything that surprises you in the above plots? What are the relationship trends?\n\n\nSolution\nThese seem to suggest that spending more money on students or teacher salaries correlates with lower SAT scores. Say it ain’t so!\n\n\nMake a single scatterplot visualization that demonstrates the relationship between `sat`, `salary`, and `expend`. Summarize the trivariate relationship between `sat`, `salary`, and `expend`. \n\nHints: 1. Try using the color or size aesthetics to incorporate the expenditure data. 2. Include some model smooths with geom_smooth() to help highlight the trends.\n\nSolution\nBelow are four different plots that one could make. There seems to be a high correlation between expend and salary, and both seem to be negatively correlated with sat.\n\n#plot 1\ng1 &lt;- ggplot(education, aes(y=sat, x=salary, color=expend)) + \n    geom_point() + \n    geom_smooth(se=FALSE, method=\"lm\") + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n#plot 2\ng2 &lt;- ggplot(education, aes(y=sat, x=salary, size=expend)) + \n    geom_point() + \n    geom_smooth(se=FALSE, method=\"lm\") + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n#plot 3\ng3 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,2))) + \n    geom_point() + \n    geom_smooth(se=FALSE, method=\"lm\") + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n#plot 4\ng4 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,3))) + \n    geom_point() + \n    geom_smooth(se=FALSE, method=\"lm\") + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\nlibrary(gridExtra)\ngrid.arrange(g1, g2, g3, g4, ncol=2)\n\nError in eval(expr, envir, enclos): object 'g1' not found\n\n\n\n\nThe `fracCat` variable in the `education` data categorizes the fraction of the state's students that take the SAT into `low` (below 15%), `medium` (15-45%), and `high` (at least 45%).\n\n\nMake a univariate visualization of the fracCat variable to better understand how many states fall into each category.\n\nMake a bivariate visualization that demonstrates the relationship between fracCat and sat. What story does your graphic tell?\nMake a trivariate visualization that demonstrates the relationship between fracCat, sat, and expend. Incorporate fracCat as the color of each point, and use a single call to geom_smooth to add three trendlines (one for each fracCat). What story does your graphic tell?\n\nPutting all of this together, explain this example of Simpson’s Paradox. That is, why does it appear that SAT scores decrease as spending increases even though the opposite is true?\n\n\nSolution\n\n\n\n\nggplot(education, aes(x = fracCat)) +\n  geom_bar() + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\n\n\n\n\nggplot(education, aes(x = fracCat, y = sat)) +\n  geom_boxplot() + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\n\n\n\n\nggplot(education, aes(color = fracCat, y = sat, x = expend)) +\n  geom_point() + geom_smooth(se = FALSE, method = 'lm') + theme_classic()\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n\n\nAmong student participation tends to be lower among states with lower expenditures. Those same states tend to have higher SAT scores because of the self-selection of who participates; only those most prepared take the SAT in those states.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Multivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/05-Multivariate_Viz.html#other-multivariate-visualization-techniques",
    "href": "src/05-Multivariate_Viz.html#other-multivariate-visualization-techniques",
    "title": "\n5  Multivariate Visualizations\n",
    "section": "Other Multivariate Visualization Techniques",
    "text": "Other Multivariate Visualization Techniques\nHeat maps\nNote that each variable (column) is scaled to indicate states (rows) with high values (yellow) to low values (purple/blue). With this in mind you can scan across rows & across columns to visually assess which states & variables are related, respectively. You can also play with the color scheme. Type ?cm.colors in the console to see various options.\n\ned &lt;- as.data.frame(education) # convert from tibble to data frame\n\nError in eval(expr, envir, enclos): object 'education' not found\n\n# convert to a matrix with State names as the row names\nrow.names(ed) &lt;- ed$State  #added state names as the row names rather than a variable\n\nError in eval(expr, envir, enclos): object 'ed' not found\n\ned &lt;- ed %&gt;% select(2:8) #select the 2nd through 8th columns\n\nError in eval(expr, envir, enclos): object 'ed' not found\n\ned_mat &lt;- data.matrix(ed) #convert to a matrix format\n\nError in eval(expr, envir, enclos): object 'ed' not found\n\nheatmap.2(ed_mat,\n  Rowv = NA, Colv = NA, scale = \"column\",\n  keysize = 0.7, density.info = \"none\",\n  col = hcl.colors(256), margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", cexRow = 2, cexCol = 2, trace = \"none\",\n  dendrogram = \"none\"\n)\n\nError in eval(expr, envir, enclos): object 'ed_mat' not found\n\n\n\nWhat do you notice? What insight do you gain about the variation across U.S. states?\n\nHeat map with row clusters\nIt can be tough to identify interesting patterns by visually comparing across rows and columns. Including dendrograms helps to identify interesting clusters.\n\nheatmap.2(ed_mat,\n  Rowv = TRUE, #this argument changed\n  Colv = NA, scale = \"column\", keysize = .7,\n  density.info = \"none\", col = hcl.colors(256),\n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", cexRow = 2, cexCol = 2, trace = \"none\",\n  dendrogram = \"row\" #this argument changed\n)\n\nError in eval(expr, envir, enclos): object 'ed_mat' not found\n\n\n\nWhat new insight do you gain about the variation across U.S. states, now that states are grouped and ordered by similarity?\n\nHeat map with column clusters\nWe can also construct a heat map which identifies interesting clusters of columns (variables).\n\nheatmap.2(ed_mat,\n  Colv = TRUE, #this argument changed\n  Rowv = NA, scale = \"column\", keysize = .7,\n  density.info = \"none\", col = hcl.colors(256),\n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", cexRow = 2, cexCol = 2, trace = \"none\",\n  dendrogram = \"column\" #this argument changed\n)\n\nError in eval(expr, envir, enclos): object 'ed_mat' not found\n\n\n\nWhat new insight do you gain about the variation across U.S. states, now that variables are grouped and ordered by similarity?\n\nStar plots\nThere’s more than one way to visualize multivariate patterns. Like heat maps, these star plot visualizations indicate the relative scale of each variable for each state. With this in mind, you can use the star maps to identify which state is the most “unusual.” You can also do a quick scan of the second image to try to cluster states. How does that clustering compare to the one generated in the heat map with row clusters above?\n\nstars(ed_mat,\n  flip.labels = FALSE,\n  locations = data.matrix(as.data.frame(state.center)), #added external data to arrange by geo location\n  key.loc = c(-70, 30), cex = 1\n)\n\nError in eval(expr, envir, enclos): object 'ed_mat' not found\n\nstars(ed_mat,\n  flip.labels = FALSE,\n  locations = data.matrix(as.data.frame(state.center)), #added external data to arrange by geo location\n  key.loc = c(-70, 30), cex = 1, \n  draw.segments = TRUE #changed argument\n)\n\nError in eval(expr, envir, enclos): object 'ed_mat' not found\n\n\n\nWhat new insight do you gain about the variation across U.S. states with the star plots (arranged geographically) as compared to heat plots?",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Multivariate Visualizations</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html",
    "href": "src/06-Spatial_Viz.html",
    "title": "\n6  Spatial Visualization\n",
    "section": "",
    "text": "Learning Goals\nYou can download a template .Rmd of this activity here. Put this in the existing folder called Assignment_04 in your folder for COMP_STAT_112.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#learning-goals",
    "href": "src/06-Spatial_Viz.html#learning-goals",
    "title": "\n6  Spatial Visualization\n",
    "section": "",
    "text": "Plot data points on top of a map using the ggmap() function along with ggplot2 functions\n\nCreate choropleth maps using geom_map()\n\nAdd points and other ggplot2 features to a map created from geom_map()\n\nUnderstand the basics of creating a map using leaflet, including adding points and choropleths to a base map",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#motivation",
    "href": "src/06-Spatial_Viz.html#motivation",
    "title": "\n6  Spatial Visualization\n",
    "section": "Motivation",
    "text": "Motivation\nTake a look at these to get motivated/inspired to make your own:\n\nNYT article on effects of redlining\nNY Times mayoral primaries\nSuper zip shiny app",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#plotting-points-on-a-map",
    "href": "src/06-Spatial_Viz.html#plotting-points-on-a-map",
    "title": "\n6  Spatial Visualization\n",
    "section": "Plotting Points on a Map",
    "text": "Plotting Points on a Map\nThere are many ways we could visually represent data on a map. The first we’ll talk about it in terms of points in a coordinate system (longitudinal, latitude).\nStarbucks Example\nThe Starbucks data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected. It includes the Latitude and Longitude of each location. Let’s start by using familiar ggplot plotting tools.\n\n# Starbucks locations\nStarbucks &lt;- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/starbucks.csv\")\n\n\nggplot(data = Starbucks) +\n  geom_point(aes(x = Longitude, y = Latitude),\n    alpha = 0.2,\n    size = 0.2\n  ) +\n  theme_classic()\n\n\n\n\n\n\n\nThe code for a point pattern probably looks familiar. To highlight the geographical nature of this scatterplot, we can superimpose the points on top of a background map, using the ggmap() function from the ggmap library.\nNOTE: We used to be able to easily bring in Google maps. As of mid-2018, in order to bring those in, you need to have a registered API key with Google. If you want to do that, see google_key in the help. Then, see the documentation for get_map(). We will bring in other types of maps since Google maps are harder to do now and require you to submit credit card information.\nWe will use a stamen map as our background. You can also take a look at stamen maps on their website. First, let’s look at an example.\n\n# Get the map information\nworld &lt;- get_stadiamap(\n  bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),\n  maptype = \"stamen_terrain\",\n  zoom = 2\n)\n\nError in `get_stamen_url()`:\n! Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.\n\n# Plot the points on the map\nggmap(world) + # creates the map \"background\"\n  geom_point(\n    data = Starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = .3,\n    size = 0.2\n  ) +\n  theme_map()\n\nError in eval(expr, envir, enclos): object 'world' not found\n\n\nNext, we will walk through the get_stadiamap() function inputs or arguments. The code below is what was used to get the world map information.\n\nget_stadiamap(\n  bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),\n  maptype = \"stamen_terrain\",\n  zoom = 2\n)\n\nbbox\nThe bbox argument tells it the minimum and maximum latitude and longitude points. So, left is the minimum longitude, right is the maximum longitude, bottom is the minimum latitude, and top is the maximum latitude.\n\n\nHelpful Resource: One helpful trick is to go to openstreetmap: zoom in on the area of interest, click export (you can customize the area you want to export), and you will see all the values you need (left, bottom, right, top). You may have to modify them slightly, which you can do after your initial plot.\n\nmaptype\nThe maptype tells it the style of the map. Check out the different options by looking in the get_stadiamap help (type ?get_stadiamap in the console).\nzoom\nWhen you make a large area, you need to decrease the zoom, otherwise it will take too long to load. So, it’s a good idea to start with a small zoom and you can always make it bigger if you want. This might seem counter-intuitive at first. Think of the zoom level as the level of detail. So, smaller numbers show less detail and larger numbers more detail.\n\n\nHelpful Trick go to the stamanmaps webpage and search for the location you are mapping. Then, in the URL, you can see the zoom number. For example, this link is a map of St. Paul: http://maps.stamen.com/terrain/#12/44.9531/-93.0904. Notice the number 12 next to /terrain/. That means it is zoomed in at 12.\n\nggmap()\nWe save the the map information from get_stadiamap() to a named value and then use it in ggmap().\nThe ggmap() function will print the “background” map. Think of it as the providing the canvas on which we will plot. This takes the place of our usual ggplot().\n\nggmap(world)\n\nError in eval(expr, envir, enclos): object 'world' not found\n\n\nAfter that, we can use the geom_XXX() functions from ggplot2 that we are used to in order to put points, lines, etc. on top of the map. But, we need to remember to also provide the data we are using in the geom_XXX() function(s) we use since we do not have the ggplot() function in which to provide it.\ntheme_map()\nThe last line of the code is theme_map(). This is optional, but it often makes it look nice. It removes excess axis lines and moves guides/legends.\nSo, the final map as a world map as the background with points plotted on top that show the Starbucks locations. The points are 20 percent (0.2) of their usual size and have a transparency level of 0.3.\nResources\n\nProf. Lendway’s demo video\n\nggmap examples from ggmap maintainer David Kahle\n\nggmap cheatsheet\nExamples: More with Starbucks\n\nNow it is your turn to work with the Starbucks data. \n\n\nAdd an aesthetic to the world map that sets the color of the points according to the ownership type. What, if anything, can you deduce from this visualization?\nConstruct a new map of Starbucks locations in the Twin Cities metro area (approximately the five county metro area).\n\nIn the Twin Cities plot, play with the zoom number. What does it do? (just describe what it does - don’t actually include more than one map).\n\nTry a couple different map types (see get_stadiamap() in help and look at maptype). Include a map with one of the other map types.\nAdd a point to the map that indicates Macalester College and label it appropriately. There are many ways you can do this, but it may be easiest with the annotate() function (see ggplot2 cheatsheet).\n\n\nSolution\n\n# a)\nggmap(world) +\n  geom_point(\n    data = Starbucks,\n    aes(\n      x = Longitude,\n      y = Latitude,\n      color = `Ownership Type`\n    ),\n    alpha = .5,\n    size = .2\n  ) +\n  scale_color_manual(values = c(\"blue\", \"red\", \"black\", \"purple\")) +\n  theme_map() +\n  theme(legend.background = element_blank()) +\n  guides(color = guide_legend(override.aes = list(size = 2,alpha = 1)))\n\nError in eval(expr, envir, enclos): object 'world' not found\n\n\n\nIt appears that most of the locations in the western hemisphere are company owned or licensed, while franchising is more common in western Europe and joint ventures are more common in eastern Asia.\n\n\n# b)\nTwinCities &lt;- get_stadiamap(\n  bbox = c(left = -94, bottom = 44.5, right = -92.5, top = 45.5),\n  maptype = \"stamen_toner\",\n  zoom = 10\n)\n\nError in `get_stamen_url()`:\n! Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.\n\nggmap(TwinCities) +\n  geom_point(\n    data = Starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = .7, size = .7,\n    color = \"red\"\n  )\n\nError in eval(expr, envir, enclos): object 'TwinCities' not found\n\n\n\nA higher zoom number leads to more detail.\n\n\n# d)\n\nTwinCities2 &lt;- get_stadiamap(\n  bbox = c(left = -94.5, bottom = 44.3, right = -91.94, top = 45.5),\n  maptype = \"alidade_smooth_dark\",\n  zoom = 10\n)\n\nError in `get_stamen_url()`:\n! Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.\n\nggmap(TwinCities2) +\n  geom_point(\n    data = Starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = .7, size = 1,\n    color = \"#00704A\"\n  )\n\nError in eval(expr, envir, enclos): object 'TwinCities2' not found\n\n\n\n# e)\n\nggmap(TwinCities) +\n  geom_point(\n    data = Starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = .8, size = 1,\n    color = \"#00704A\"\n  ) +\n  annotate(\n    geom = \"point\",\n    x = -93.1712321,\n    y = 44.9378965,\n    color = \"orange\"\n  ) +\n  annotate(\n    geom = \"text\",\n    x = -93.1712321,\n    y = 44.91,\n    color = \"darkorange\",\n    label = \"MAC\"\n  ) +\n  theme_map() +\n  theme(legend.background = element_blank())\n\nError in eval(expr, envir, enclos): object 'TwinCities' not found",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#contour-maps",
    "href": "src/06-Spatial_Viz.html#contour-maps",
    "title": "\n6  Spatial Visualization\n",
    "section": "Contour Maps",
    "text": "Contour Maps\nThe geom_density_2d and stat_density_2d functions are great for plotting distributions over spatial regions. Here are examples that shows the densities of Starbucks in the North America.\n\nUS_map2 &lt;- get_stadiamap(\n  bbox = c(left = -132, bottom = 20, right = -65, top = 55),\n  maptype = \"stamen_toner_lite\",\n  zoom = 5\n)\n\nError in `get_stamen_url()`:\n! Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.\n\n# Contour plot\nggmap(US_map2) +\n  geom_density_2d(data = Starbucks, aes(x = Longitude, y = Latitude), size = 0.3) + \n  theme_map()\n\nError in eval(expr, envir, enclos): object 'US_map2' not found\n\n\n\n# Density plot\nggmap(US_map2) +\n  stat_density_2d(\n    data = Starbucks,\n    aes(x = Longitude, y = Latitude, fill = stat(level)),\n    size = 0.1, alpha = .2, bins = 20, geom = \"polygon\", color = 'darkblue'\n  ) +\n  scale_alpha(guide = 'none') +\n  scale_fill_gradient(\n    low = \"darkblue\", high = \"red\",\n    guide = 'none'\n  ) + \n  theme_map()\n\nError in eval(expr, envir, enclos): object 'US_map2' not found",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#choropleths",
    "href": "src/06-Spatial_Viz.html#choropleths",
    "title": "\n6  Spatial Visualization\n",
    "section": "Choropleths",
    "text": "Choropleths\nGeographical data needn’t be expressed by latitude and longitude. For choropleth maps, instead of visualizing our data as points with different aesthetics (size, color, transparency, etc.), we color different regions (or mathematically, polygons) on the maps based on data values. To do this we need to specify both the geometric regions on which the data resides (counties, states, zip codes, etc.), and then wrangle the data so that there is one value per region.\nLet’s return to the Starbucks data. First, we will create a new dataset, starbucks_us_by_state that limits the data to the US, finds the number of Starbucks in each state, and creates a state name that is in all lowercase letters that matches the state name in the region variable of the states_map dataset.\nThe states_map dataset gives information about creating the borders of the US states. The data is retrieved using the map_data() function. Run ?map_data in the console to see more information about what other maps are available. There are also other packages that provide different types of maps.\nThen, we can use geom_map() to create a choropleth map. Let’s take a look at the map and we’ll go through the details after.\n\n# Create a new Starbucks dataset that\n# - filters to the US\n# - summarizes the number of Starbucks in each state\n# - has full names of states in lowercase letters (to match to states_map data created next)\n\nstarbucks_us_by_state &lt;- Starbucks %&gt;%\n  filter(Country == \"US\") %&gt;%\n  count(`State/Province`) %&gt;%\n  mutate(state_name = str_to_lower(abbr2state(`State/Province`)))\n\n# US states map information - coordinates used to draw borders\nstates_map &lt;- map_data(\"state\")\n\n# map that colors state by number of Starbucks\nstarbucks_us_by_state %&gt;%\n  ggplot() +\n  geom_map(\n    map = states_map,\n    aes(\n      map_id = state_name,\n      fill = n\n    )\n  ) +\n  # This assures the map looks decently nice:\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n\n\n\n\n\n\n\nNow, let’s look more closely at what each piece of the code below is doing.\n\nstarbucks_us_by_state %&gt;%\n  ggplot() +\n  geom_map(\n    map = states_map,\n    aes(\n      map_id = state_name,\n      fill = n\n    )\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n\nChoose a Map\nThe map argument tells R at which level to create the map. Really, it tells it how to draw all the borders This is a very special data set. According to the geom_map() documentation, it is a “data frame that contains the map coordinates … It must contain columns x or long, y or lat, and region or id.” We are using the map_data() function to create the map file (see above for more details. You can open the map data, states_map, and see that it adheres to the rules.\nConnect Map ID/Region Variable to Data Being Plotted\nThe map_id inside of aes() is a required aesthetic for the geom_map() geom. It tells R which variable is the region/id variable, in this case the state. It connects the region or id from the map (region variable in states_map dataset, in this example) to the dataset being plotted (state_name in starbucks_us_by_state, in this example). So state_name needs to have the same form as region, which is why we modified the state names in starbucks_us_by_state.\nUse ggplot2 Features\nWe tell it to fill in the states by the variable n, the number of Starbucks in each state. With the geom_map() geom, it will fill in the borders of the regions we defined in the map argument.\nexpand_limits()\nUse expand_limits() to assure that the map covers the entire area it’s supposed to. We put the longitude variable from states_map for the x argument and the latitude variable from states_map for the y argument to assure the map stretches across the entire range of longitudes and latitudes in the map.\ntheme_map()\nThis is a personal preference, but theme_map() often makes the map look nicer.\nAdd ggplot2 Layers\nYou can add any of the ggplot2 layers on top of this map. In this example, we’ve added MN Starbucks as points, included a title, and changed the legend background (so it doesn’t have one).\n\nstarbucks_us_by_state %&gt;%\n  ggplot() +\n  geom_map(\n    map = states_map,\n    aes(\n      map_id = state_name,\n      fill = n\n    )\n  ) +\n  geom_point(\n    data = Starbucks %&gt;% filter(`State/Province` == \"MN\"),\n    aes(x = Longitude, y = Latitude),\n    size = 0.05,\n    alpha = 0.2,\n    color = \"goldenrod\"\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  labs(title = \"Starbucks in MN\") +\n  theme_map() +\n  theme(legend.background = element_blank())\n\n\n\n\n\n\n\nResources\n\nProf. Lendway’s demo video\n\nggplot2 documentation\n\n\nExample by Arie Voorman (some things could be out of date since it’s from 2015)\nAlternative Methods\nThere are plenty of other methods available to make choropleths in R.\nLet’s demonstrate just three additional methods with data on the 2016 U.S. presidential election results by county (file):\n\nelect &lt;- read_csv(here(\"data\", \"electionDemographics16.csv\"))\n\n# reformat the FIPS region codes\nelect &lt;- elect %&gt;% mutate(fips = ifelse(region &lt; 10000, paste(\"0\", as.character(region), sep = \"\"), as.character(region)))\n\n# define appropriate (& nicely labeled) breaks\nelect$brk &lt;- cut(elect$perrep_2016,\n  breaks = seq(0, 100, by = 10),\n  labels = c(\n    \"0-9\", \"10-19\", \"20-29\", \"30-39\",\n    \"40-49\", \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"\n  ),\n  include.lowest = TRUE\n)\n\nFirst, we will load a map of the counties in the United States:\n\ncounty_map &lt;- socviz::county_map # from socviz library\n\nmapping_data &lt;- elect %&gt;% \n  rename(id = fips) %&gt;%\n  left_join(county_map, by = \"id\")\n\nNow here is the map with the method from above, using ggplot + geom_map:\n\nggplot(elect) +\n  geom_map(data = elect, map = county_map, aes(map_id = fips, fill = brk)) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"Percent Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\")\n\n\n\n\n\n\n\nAlternative 1: ggplot + geom_polygon\n\n\nggplot(mapping_data, aes(x = long, y = lat, fill = perrep_2016, group = group)) +\n  coord_equal() +\n  geom_polygon(color = NA) +\n  scale_fill_gradientn(name = \"Percent Republican\", colours = c(\"blue\", \"purple\", \"red\"), values = scales::rescale(seq(0, 100, by = 10))) +\n  theme_map() +\n  theme(legend.position = \"right\")\n\n\n\n\n\n\n\nAlternative 2: plot_usmap\n\n\n# This function is in the usmap package\nplot_usmap(data = elect, values = \"brk\", color = NA, exclude = \"AK\") +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"Percent Republican\") + theme(legend.position = \"right\")\n\n\n\n\n\n\n\nPractice: Even More with Starbucks\nThe example above did not account for population of each state in the map. In the code below, a new variable is created, starbucks_per_10000, that gives the number of Starbucks per 10,000 people. It is in the starbucks_with_2018_pop_est dataset. Here is a link to the data\n\ncensus_pop_est_2018 &lt;- read_csv(\"https://bcheggeseth.github.io/112_fall_2022/data/us_census_2018_state_pop_est.csv\") %&gt;%\n  separate(state, into = c(\"dot\", \"state\"), extra = \"merge\") %&gt;%\n  select(-dot) %&gt;%\n  mutate(state = str_to_lower(state))\n\n\nstarbucks_with_2018_pop_est &lt;-\n  starbucks_us_by_state %&gt;%\n  left_join(census_pop_est_2018,\n    by = c(\"state_name\" = \"state\")\n  ) %&gt;%\n  mutate(starbucks_per_10000 = (n / est_pop_2018) * 10000)\n\n\nCreate a choropleth state map that shows the number of Starbucks per 10,000 people on a map of the US. \n\n- Use a new fill color palette for the states, \n- add points for all Starbucks in the contiguous US, \n- add an informative title for the plot, and \n- include a caption that says who created the plot (you!). \n\nMake a conclusion about what you observe.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#dynamnic-maps-with-leaflet",
    "href": "src/06-Spatial_Viz.html#dynamnic-maps-with-leaflet",
    "title": "\n6  Spatial Visualization\n",
    "section": "Dynamnic Maps with leaflet\n",
    "text": "Dynamnic Maps with leaflet\n\nLeaflet is an open-source JavaScript library for creating maps. It can be used outside of R, but we will only discuss using the leaflet library in R.\nThis library uses a different plotting framework from ggplot2 although it still has a tidyverse feel due to its use of the pipe, %&gt;% and the way it adds layers to the plot, just like in ggplot2.\nSteps to Create a Map\n\nCreate a map widget by calling leaflet() and telling it the data to use.\n\nAdd a base map using addTiles() (the default) or addProviderTiles().\nAdd layers to the map by using layer functions (e.g. , addMarkers(), addPolygons()) to modify the map widget.\n\nRepeat step 3 as desired.\n\nPrint the map widget to display it.\nCreating a Map with Markers/Points\nBelow, we create a basic map and add points of interest (the points are a layer on the map). The data are in favorite_stp, created below.\nThe function we will use to create the maps will look for certain variable names for latitude (lat, latitude) and longitude (lng, long, or longitude). If you do not name them one of those things or if the data you are using doesn’t name them that, you need to call out the name explicitly (you’ll see that next). You can use a “two-finger scroll” to zoom in and out.\n\n# Brianna's favorite St. Paul places - Used Google Maps to get coordinates\n# https://support.google.com/maps/answer/18539?hl=en&co=GENIE.Platform%3DDesktop\nfavorite_stp &lt;- tibble(\n  place = c(\n    \"Macalester College\", \"Groveland Recreation Center\",\n    \"Due Focacceria\", \"Shadow Falls Park\", \"Mattocks Park\",\n    \"Carondelet Fields\", \"Pizza Luce\", \"Cold Front Ice Cream\"\n  ),\n  long = c(\n    -93.1712321, -93.1851310,\n    -93.1775469, -93.1944518, -93.171057,\n    -93.1582673, -93.1524256, -93.156652\n  ),\n  lat = c(\n    44.9378965, 44.9351034, 44.9274973,\n    44.9433359, 44.9284142, 44.9251236,\n    44.9468848, 44.9266768\n  )\n)\n\n\nleaflet(data = favorite_stp) %&gt;% # base plot\n  addTiles() %&gt;% # base map - default is openstreet map\n  addMarkers() # Adds markers - knows lat and long from names in data\n\n\n\n\n\nThe graph below is the same as above, but the code explicitly specifies latitude and longitude, which you would need to do if those variables had a name not recognized by the function, and adds labels. WARNING: DO NOT FORGET THE ~ BEFORE THE VARIABLE NAMES!!!\n\nleaflet(data = favorite_stp) %&gt;%\n  addTiles() %&gt;%\n  addMarkers(\n    lng = ~long,\n    lat = ~lat,\n    label = ~place\n  )\n\n\n\n\n\nWe can change just about everything about our map. The plot below is the same plot as above with some aesthetic changes:\n\n\nWe changed the base map with addProviderTiles().\n\nTo see all available provider base maps, type providers in the console.\nTo access those maps, use providers$PROVIDERNAME inside the addProviderTiles() function, where PROVIDERNAME is one of those listed providers. When you type provider$ a list should show up that you can click on.\n\n\nWe changed the marker type by using addCircles() instead of addMarkers() - Search addControl in the Help or type ?addControl into the console to see what all the arguments mean and how you can change them.\nAll variable arguments are preceded with a tilde, ~.\nThe weight argument tells it how thick to make the lines or points, pixels.\nThe opacity argument is the transparency, like the alpha argument in ggplot2.\nColors need to be in “hex” form. We used the col2hex() function from the gplots library to do that. The colors also need to be valid R colors.\n\n\nleaflet(data = favorite_stp) %&gt;%\n  addProviderTiles(providers$Stamen.Watercolor) %&gt;%\n  addCircles(\n    lng = ~long,\n    lat = ~lat,\n    label = ~place,\n    weight = 10,\n    opacity = 1,\n    color = col2hex(\"darkblue\")\n  )\n\n\n\n\n\nThe map below is also the “same” as the ones above, but with a new base map and a line to trace a route, which was created with the addPolylines() layer. It traces the locations in the order they are entered in the dataset.\n\nleaflet(data = favorite_stp) %&gt;%\n  addProviderTiles(providers$CartoDB.DarkMatter) %&gt;%\n  addCircles(\n    lng = ~long,\n    lat = ~lat,\n    label = ~place,\n    weight = 10,\n    opacity = 1,\n    color = col2hex(\"darkred\")\n  ) %&gt;%\n  addPolylines(\n    lng = ~long,\n    lat = ~lat,\n    color = col2hex(\"darkred\")\n  )\n\n\n\n\n\nChoropleth Layers with addPolygons()\n\nFor making maps with borders (like choropleth maps), the functions can receive the base maps with spatial data a few different ways. In the example here, we use functions from the sf package to get the data in the right form. In the demo video listed under Resources below, a data.frame is translated to an sf object. Hopefully those two sets of instructions fit most of the cases you are interested in.\nIn the code chunk below, the function st_read() downloads the shape file for the counties of North Carolina, which is included in the sf package.\n\n# North Carolina births and sids deaths\nnc &lt;- st_read(system.file(\"shape/nc.shp\", package = \"sf\"),\n  quiet = TRUE\n) %&gt;%\n  mutate(sid_per_1000birth_79 = SID79 / BIR79 * 1000)\n\n# Compute centroid (center) of each county\ncounty_centroid_lat_long &lt;- as_tibble(st_coordinates(st_centroid(nc))) %&gt;%\n  rename(\n    centr_long = X,\n    centr_lat = Y\n  )\n\n# County names and sid_per_1000birth_79\nnc_centroid_county &lt;- st_drop_geometry(nc) %&gt;%\n  select(NAME, sid_per_1000birth_79)\n\n# All centroid level info\nnc_centroid &lt;- county_centroid_lat_long %&gt;%\n  bind_cols(nc_centroid_county)\n\nThe dataset has number of births and number of SIDS cases in each county of North Carolina from 1974-1979 and 1979-1984. We computed a variable called sid_per_1000birth_79 which is the number of SIDS cases per 1000 births in 1979.\nBelow, the the NAMES and geometry variables from the first five rows of the data are printed out. The geometry variable contains information about how to plot the boundaries of the counties. Open the dataset and examine the geometry variable. The leaflet function knows that the geometry variable contains this special information.\n\nnc %&gt;%\n  select(NAME, geometry) %&gt;%\n  slice(1:5)\n\nSimple feature collection with 5 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965\nGeodetic CRS:  NAD27\n         NAME                       geometry\n1        Ashe MULTIPOLYGON (((-81.47276 3...\n2   Alleghany MULTIPOLYGON (((-81.23989 3...\n3       Surry MULTIPOLYGON (((-80.45634 3...\n4   Currituck MULTIPOLYGON (((-76.00897 3...\n5 Northampton MULTIPOLYGON (((-77.21767 3...\n\n\nTo learn more about the data type nc into the Help menu or ?nc into the console.\nThis plot puts the map with North Carolina county borders on top of the Open Street Map. This map isn’t that interesting by itself.\n\nleaflet(nc) %&gt;%\n  addTiles() %&gt;%\n  addPolygons()\n\n\n\n\n\nNow, let’s use some of the data to enhance the graph by creating a choropleth map where we color the counties by sid_per_1000birth_79. In ggplot(), we can map a variable to color or fill inside the aesthetic, but in the leaflet functions we cannot do this. Instead, we need to create a variable of hex color names that tells it how to color or fill. Thankfully, there are functions that help us do that! Let’s walk through the detail of how we created the graph below.\n\n# creates a function that can be used to map a variable to\n# the color palette using viridis \npal &lt;- colorNumeric(\"viridis\",\n  domain = nc$sid_per_1000birth_79\n)\n\nleaflet(nc) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~ pal(sid_per_1000birth_79), # fills according to that variable\n    fillOpacity = 0.7\n  ) # like alpha in ggplot\n\n\n\n\n\nThe colorNumeric() function returns a function that maps a variable’s values to colors in the given palette, in this case “viridis”. So, pal() is a function. We can then use that function inside addPolygons(). If we apply the function to the sid_per_1000birth_79 variable, it returns a variable of hex colors and the variable of colors is used to fill the counties.\nBelow we print out what happens when pal() is applied to sid_per_1000birth_79. We can see that it returns hex colors. So, the variable in the fillColor argument inside addPolygons() above, is a variable of hex color names.\n\nhead(pal(nc$sid_per_1000birth_79))\n\n[1] \"#440154\" \"#C0DF25\" \"#38588C\" \"#2A778E\" \"#34618D\" \"#26828E\"\n\n\nAgain, this is different from ggplot(), where we could map a variable to color or fill and it would do the translating of variable to color scale for us. In the leaflet functions, we have to explicitly provide the colors in a variable. The colorNumeric() command helps you do that. colorBin(), colorQuantile(), and colorFactor() are other functions you might need to use depending on the type of variable you are trying to map to colors.\nThere are many options in leaflet that can be customized, much like ggplot(). Here is a commented set of code to point out some useful functions and arguments:\n\n# creates a function that can be used to map a variable to\n# the color palette using viridis\npal &lt;- colorNumeric(\"viridis\",\n  domain = nc$sid_per_1000birth_79\n)\n\nleaflet(nc) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    # skips drawing the borders:\n    stroke = FALSE,\n    # fills according to variable of hex colors:\n    fillColor = ~ pal(sid_per_1000birth_79),\n    # changes transparency, like alpha in ggplot\n    fillOpacity = 0.7,\n    # how much to simplify the plot when zooming:\n    smoothFactor = 0.5,\n    # changes what happens to the shape when we mouse over it\n    highlight = highlightOptions(\n      weight = 5,\n      color = \"black\",\n      fillOpacity = 0.9,\n      bringToFront = FALSE\n    )\n  ) %&gt;%\n  addCircles(\n    data = nc_centroid,\n    lng = ~centr_long,\n    lat = ~centr_lat,\n    # label that appears when you click on the marker,\n    # in this case county name and sid_per_1000birth_79\n    # rounded to the 2nd decimal\n    popup = ~ paste(NAME, \": \",\n      round(sid_per_1000birth_79, 2),\n      sep = \"\"\n    ),\n    radius = 2\n  ) %&gt;%\n  # Add a legend\n  addLegend(\n    pal = pal,\n    values = ~sid_per_1000birth_79,\n    opacity = 0.5,\n    title = 'SID Rate (per 1000) in 1979',\n    position = \"bottomright\"\n  )\n\n\n\n\n\nResources\n\n\nProf. Lendway’s introductory video\n\nProf. Lendway’s demo video\n\nDetailed leaflet documenation (with examples)\nleaflet cheat sheet\nProvider map previews\n\nTutorial by Andrew Ba Tran, investigative data reporter at Washington Post\nFor more advanced work with spatial mapping, GIS in R, etc. see the sf package.\nPractice: Favorite Places\n\n   \nIn this exercise, you are going to create a single map of some of your favorite places! The end result will be one map.    \n\na. Create a data set using the `tibble()` function that has 10-15 rows of your favorite places. The columns will be the name of the location, the latitude, the longitude, and a column that indicates if it is in your top 3 favorite locations or not. For an example of how to use `tibble()`, look at the `favorite_stp` that is created manually above.     \nb. Create a map that uses circles to indicate your favorite places. Label them with the name of the place. Choose the base map you like best. Color your 3 favorite places differently than the ones that are not in your top 3. Add a legend that explains what the colors mean.",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  },
  {
    "objectID": "src/06-Spatial_Viz.html#appendix-r-functions",
    "href": "src/06-Spatial_Viz.html#appendix-r-functions",
    "title": "\n6  Spatial Visualization\n",
    "section": "Appendix: R Functions",
    "text": "Appendix: R Functions\nMapping Points Functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nggmap()\nCreate a plotting canvas with a map background\nggmap(world) + geom_point(...)\n\n\nget_stadiamap(bbox,maptype,zoom)\nFetches a stamen map as background\nget_stadiamap(bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = \"terrain\", zoom = 2)\n\n\nggthemes::theme_map()\nClean plotting themes for maps\nggmap(world) + geom_point(...) + theme_map()\n\n\nContour/Density Mapping Functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\ngeom_density_2d\nPlots contour maps (2d density)\nggmap(world) + geom_density_2d(data,aes(x,y))\n\n\nstat_density_2d\nPlots a filled in contour heat map\nggmap(world) + state_density_2d(data,aes(x,y,fill = stat(level)),geom='polygon')\n\n\nscale_fill_gradient(low,high)\nChange fill gradient scale based on a low and high color\nggmap(world) + geom_point(...) + scale_fill_gradient(low='darkblue',high='red')\n\n\nChoropleths Mapping Functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nmap_data()\nGet map region boundaries from maps package into a dataframe for plotting with ggplot2\nstate_map &lt;- map_data('state')\n\n\ngeom_map()\nLinks map regions with data set with info about regions and plots it\nggplot(starbucks_us_by_state) + geom_map(map = states_map,aes(map_id = state_name,fill = n))\n\n\nexpand_limits(x,y)\nEnsure limits include data values in x and y\n+ expand_limits(x = states_map$long, y = states_map$lat)\n\n\nDynamic Mapping Functions\n\n\n\n\n\n\n\nFunction/Operator\nAction\nExample\n\n\n\nleaflet(data)\nCreate base dynamic plot\nleaflet(data = favorite_stp)\n\n\naddTiles()\nAdds the base map - default is openstreet map\n+ addTiles()\n\n\naddProviderTiles()\nAdds the alternative base maps\n+ addProviderTiles(providers$Stamen.Watercolor)\n\n\naddMarkers(lng,lat,label)\nAdd marker glyphs to dynamic map\n+ addMarkers(lng= ~long, lat= ~lat, label=~place)\n\n\naddCircles(lng,lat,label,weight,opactiy,color)\nAdd circle glyphs to dynamic map\n+ addCircles(lng= ~long, lat= ~lat, label=~place, weight=10,opacity=1,color = col2hex('darkblue'))\n\n\naddPolylines(lng,lat)\nAdd lines that connect locations to dynamic map\n+ addPolylines(lng= ~long, lat= ~lat, color = col2hex('darkred'))\n\n\naddPolygons(fillColor,fillOpacity)\nAdd polygons to dynamic map (if data is sf class)\n+ addPolygons()",
    "crumbs": [
      "Visualization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spatial Visualization</span>"
    ]
  }
]