{"title":"Regular Expressions","markdown":{"headingText":"Regular Expressions","containsRefs":false,"markdown":"```{r 14_setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, error = TRUE, tidy = FALSE, message = FALSE, cache.extra = packageVersion(\"tufte\"))\nlibrary(tidyverse)\nlibrary(ggmap)\nlibrary(lubridate)\nlibrary(rvest)\nlibrary(stringr)\n```\n\n\n## Learning Goals {-}\n\n- Develop comfort in working with strings of text data \n- Use regular expressions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the `stringr` package.\n\nCreate a new Rmd file (save it as 14-Regex.Rmd). Put this file in a folder `Assignment_09` in your `COMP_STAT_112` folder.\n\n- Make sure to add alt text using fig.alt!\n\n\n## Regular Expressions and Character Strings {-}\n\nRegular expressions allow us to describe character patterns. Regular expressions allow us to:^[Source: [regular expression tutorial](https://ryanstutorials.net/regular-expressions-tutorial/).]\n\n- **Search** for particular items within a large body of text. For example, you may wish to identify and extract all email addresses.\n- **Replace** particular items. For example, you may wish to clean up some poorly formatted HTML by replacing all uppercase tags with lowercase equivalents.\n- **Validate** input. For example, you may want to check that a password meets certain criteria such as, a mix of uppercase and lowercase, digits and punctuation.\n- **Coordinate** actions. For example, you may wish to process certain files in a directory, but only if they meet particular conditions.\n- **Reformat** text. For example, you may want to split strings into different parts, each to form new variables.\n- and more...\n\n**Start by doing this [interactive tutorial](https://regexone.com/).** Note that neither the tutorial nor regular expressions more generally are specific to `R`. \n\n- Some of the syntax in the tutorial is slightly different from what we'll use in `R`, but it will still help you get acclimated to the main ideas of regular expressions.\n\n## Wrangling with Regular Expressions in `R` {-}\n\nNow that we have some idea how regular expressions work, let's examine how to use them to achieve various tasks in `R`. It will be helpful to have your [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf) handy. \n\nNote: Many of these tasks can either be accomplished with functions from the `base` (built-in) package in `R` or from the `stringr` package, which is part of the Tidyverse. In general, the `stringr` functions are faster, which will be noticeable when processing a large amount of text data.\n\n```{r}\nexample <- \"The quick brown fox jumps over the lazy dog.\"\nexample2 <- \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\nexample3 <- \"This is a test\"\n```\n\n### Search and replace patterns with `str_replace` or `str_replace_all` (`stringr`) {-}\n\nTo search for a pattern and replace it, we can use the function `str_replace` and `str_replace_all` in the `stringr` package. Note that `str_replace` only replaces the first matched pattern, while `str_replace_all` replaces all. Here are some examples:\n\n```{r}\nstr_replace(example, \"quick\", \"really quick\")\nstr_replace_all(example, \"(fox|dog)\", \"****\") # | reads as OR\nstr_replace_all(example, \"(fox|dog).\", \"****\") # \".\" for any character\nstr_replace_all(example, \"(fox|dog)\\\\.$\", \"****\") # at end of sentence only, \"\\\\.\" only for a period\nstr_replace_all(example, \"the\", \"a\") # case-sensitive only matches one\nstr_replace_all(example, \"[Tt]he\", \"a\") # # will match either t or T; could also make \"a\" conditional on capitalization of t\nstr_replace_all(example, \"[Tt]he\", \"a\") # first match only\n```\n\n\n### Detect patterns with `str_detect` (`stringr`) {-}\n\n```{r}\nexample2 <- \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\nexample3 <- \"This is a test\"\nexamples <- c(example, example2, example3)\n\npat <- \"[^aeiouAEIOU ]{3}\" # Regular expression for three straight consonants. Note that I've excluded spaces as well\n\nstr_detect(examples, pat) # TRUE/FALSE if it detects pattern\n\nstr_subset(examples, pat) # Pulls out those that detects pattern\n```\n\n### Locate patterns with `str_locate` {-}\n\n```{r}\nstr_locate(example, pat) # starting position and ending position of first match\n```\n\nLet's check the answer:\n\n```{r}\nstr_sub(example, 23, 25)\n```\n\n### Extract patterns with `str_extract` and `str_extract_all` {-}\n\n```{r}\npat2 <- \"[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}\" # consonant followed by two vowels followed by a consonant\nstr_extract(example2, pat2) # extract first match\nstr_extract_all(example2, pat2, simplify = TRUE) # extract all matches\n```\n\n### Count the number of characters with `str_length` {-}\n\n```{r}\nstr_length(example2)\n```\n\n### Convert a string to all lower case letters with `str_to_lower` {-}\n\n```{r}\nstr_to_lower(example2)\n```\n\n### Split strings with `separate` (`tidyr`) {-}\n\n```{r}\ndf <- tibble(ex = example2)\ndf <- separate(df, ex, c(\"line1\", \"line2\", \"line3\", \"line4\"), sep = \" / \")\ndf$line1\ndf$line2\ndf$line3\ndf$line4\n```\n\n\nNote: The function `separate()` is in the `tidyr` package.\n\n## Practice: Fall 2022 Enrollment Exploration {-}\n\nThe tibble `courses` has the Fall 2022 enrollment information from the Macalester Registrar's website, which we could gain with web scraping tools. See code below if you are interested in trying out web scraping!\n\n```{r, echo=TRUE,eval=FALSE}\nfall2022 <- read_html(\"https://www.macalester.edu/registrar/schedules/2022fall/class-schedule\")\n\n# Retrieve and inspect course numbers\ncourse_nums <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-course-number\") %>%\n  html_text()\n\n# Retrieve and inspect course names\ncourse_names <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-course-title\") %>%\n  html_text()\n\ncourse_nums_clean <- stringr::str_sub(course_nums, end = nchar(course_nums) - 6)\n\ncrn <- stringr::str_sub(course_nums, start = nchar(course_nums) - 4)\n\ncourse_instructors <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-label:nth-child(6)\") %>%\n  html_text()\ncourse_instructors_short <- stringr::str_sub(trimws(course_instructors), start = 13)\n\ncourse_days <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-label:nth-child(3)\") %>%\n  html_text()\ncourse_days_short <- trimws(stringr::str_sub(trimws(course_days), start = 7))\n\ncourse_times <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-label:nth-child(4)\") %>%\n  html_text()\ncourse_times_short <- stringr::str_sub(trimws(course_times), start = 7)\n\ncourse_rooms <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-label:nth-child(5)\") %>%\n  html_text()\ncourse_rooms_short <- stringr::str_sub(trimws(course_rooms), start = 7)\n\ncourse_avail <-\n  fall2022 %>%\n  html_nodes(\".class-schedule-label:nth-child(7)\") %>%\n  html_text()\ncourse_avail_short <- stringr::str_sub(trimws(course_avail), start = 14)\n\nsafe_html <- possibly(.f = read_html,otherwise = NA)\nSITES <- paste0(\"https://webapps.macalester.edu/registrardata/classdata/Fall2022/\", crn) %>%\n  purrr::map(~ posshtml(.x))\n\nsafe_read <- possibly(.f = function(x) html_nodes(x, \"p:nth-child(1)\") %>%\n    html_text() %>%\n    trimws(), otherwise = NA)\ncourse_desc <- SITES %>%\n  purrr::map_chr(~ safe_read(.x))\n\nsafe_read2 <- possibly(.f = function(x) html_nodes(x, \"p:nth-child(2)\") %>%\n    html_text() %>%\n    trimws() %>% stringr::str_sub(start = 32) %>%\n    trimws(), otherwise = NA)\ngen_ed <- SITES %>%\n  purrr::map_chr(~ safe_read2(.x))\n\n\ncourses <-\n  tibble(\n    number = course_nums_clean,\n    crn = crn,\n    name = course_names,\n    days = course_days_short,\n    time = course_times_short,\n    room = course_rooms_short,\n    instructor = course_instructors_short,\n    avail_max = course_avail_short,\n    desc = course_desc,\n    gen_ed = gen_ed\n  )\n\nwrite_csv(courses, file = 'Mac2022Courses.csv')\n```\n\n```{r, echo=FALSE}\ncourses <- read_csv('data/Mac2022Courses.csv')\nknitr::kable(\n  courses[1:6, 1:8],\n  caption = \"First six entries in the Fall 2022 Macalester course info data.\"\n)\n```\n\nYou can read in the data created from the webscrapping code above from the course site:\n\n```{r eval=FALSE, echo=TRUE}\ncourses <- read_csv('https://bcheggeseth.github.io/112_fall_2023/data/Mac2022Courses.csv')\n```\n\n\n```{exercise,name=\"Rearrange data table\"}\nMake the following changes to the `courses` data table (save the updated table as `courses`):\n\na) Split `number` into three separate columns: `dept`, `number`, and `section`.\nb) Split the `avail_max` variable into two separate variables: `avail` and `max`. It might be helpful to first remove all appearances of \"Closed \". \nc) Use `avail` and `max` to generate a new variable called `enrollment`.\nd) Split the `time` variable into two separate columns: `start_time` and `end_time`. Convert all of these times into continuous 24 hour times (e.g., 2:15 pm should become 14.25). *Hint: check out the documentation for the function `parse_date_time()`.*\n```\n\n\n\n```{exercise,name=\"WA courses\"}\nMake a bar plot showing the number of Fall 2022 sections satisfying the Writing WA requirement, sorted by department code.^[For this exercise, you can count cross-listed courses towards both departments' WA counts.] Note: some courses satisfy multiple requirements.\n\n```\n\n\n<br>\n\nIn the next series of exercises, we are going to build up an analysis to examine the number of student enrollments for each faculty member.\n\n```{exercise, name=\"Filter cases\"}\nFor this particular analysis, we do not want to consider certain types of sections. Remove all of the following from the data table (save subset dataset as `courses2`):\n\na) All sections in `PE` or `INTD`.\nb) All music ensembles and dance practicum sections (these are all of the MUSI and THDA classes with numbers less than 100).\nc) All lab sections. This is one is a bit tricky. You can search for \"Lab\" or \"Laboratory\", but be careful not to eliminate courses with words such as \"Labor\". Some of these have section numbers that end in \"-L1\", for example.\n\n```\n\n\n```{exercise, label=\"nt\",name=\"Handle cross-listed courses\"}\nSome sections are listed under multiple different departments (cross-listed courses), and you will find the same instructor, day, time, etc. Note: they may have different course numbers. \n\nFor this activity, we only want to include each actual section once and it doesn't really matter which department code we associate with this section. Eliminate all duplicated cross-listed courses from `courses2`, keeping each actual section just once (save updated table as `courses3`). Hint: look into the `R` function `distinct`, and think carefully about how to find duplicates.\n\n```\n\n\n```{exercise, name=\"Co-taught courses\"}\nUsing `courses3` (i.e. after removing non 4-credit courses and cross-listed duplicates), make a table with all Fall 2022 co-taught courses (i.e., more than one instructor). You don't need to save the new table. Hint: There was a class in Fall 2022 called Land/Water that was co-taught. Look for patterns in the data that could let you distinguish which courses were co-taught.\n\n```\n\n\n```{exercise, name=\"Faculty enrollments\"}\nUsing `courses3` (i.e. after removing non 4-credit courses and cross-listed duplicates), make a table where each row contains a faculty, the number of sections they are teaching in Fall 2022, and the total enrollments in those section. Sort the table from highest total enrollments to lowest. You should find two current Comp/Stat 112 instructors in the top 3.^[For the purposes of this exercise, we are just going to leave co-taught courses as is so that you will have an extra row for each pair or triplet of instructors. Alternatives would be to allocate the enrollment number to each of the faculty members or to split it up between the members. The first option would usually be the most appropriate, although it might depend on the course.]\n\n```\n\n\n```{exercise, name=\"Evening courses\"}\nCreate and display a new table with all night courses (i.e., a subset of `courses3`). Also make a bar plot showing the number of these courses by day of the week.\n\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles/styles.css"],"toc":true,"output-file":"14-Regex.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","code-copy":true,"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}