{"title":"(PART) Additional Topics","markdown":{"headingText":"(PART) Additional Topics","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"```{r 15_setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, error = TRUE, tidy = FALSE, message = FALSE, cache.extra = packageVersion(\"tufte\"))\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(rvest)\n```\n\n\n# Data Acquisition: Scraping the Web {-}\n\n## Learning Goals {-}\n\n- Develop comfort in using CSS Selectors and the Selector Gadget to identify data of interest within a website\n- Use `html_nodes` and `html_text` within `rvest` packages to scrape data from websites using CSS selectors\n- Develop initial comfort in cleaning text data\n\n\nYou can download a template .Rmd of this activity [here](template_rmd/15-Data_Scraping.Rmd).\n\n\n## Scraping Data {-}\n\n\nAdditional readings:  \n\n* [rvest](https://www.analyticsvidhya.com/blog/2017/03/beginners-guide-on-web-scraping-in-r-using-rvest-with-hands-on-knowledge/)     \n* [CSS selectors](https://css-tricks.com/how-css-selectors-work/)\n\nWhile a great deal of data is available via Web APIs, data download link, and data warehouses, not all of it is. Programs can use a process called **web scraping** to collect data that is available to humans (via web browsers) but not computer programs. \n\n### Finding CSS Selectors {-}\n\nIn order to gather information from a webpage, we must learn the language used to identify patterns of specific information. For example, on the [Macalester Registrar's Fall 2021 Class Schedule](https://www.macalester.edu/registrar/schedules/2021fall/class-schedule) you can visually see that the data is represented in a table. The first column shows the course number, the second the title, etc.\n\n```{r echo=FALSE,fig.cap=\"Subset of Macalester registration data for Fall 2021.\"}\nknitr::include_graphics(\"images/registrar.png\")\n```\n\nWe will identify data in a webpage using a pattern matching language called [CSS Selectors](https://css-tricks.com/how-css-selectors-work/) that can refer to specific patterns in HTML, the language used to write web pages. \n\nFor example, the CSS selector \"a\" selects all hyperlinks in a webpage (\"a\" represents \"anchor\" links in HTML), \"table > tr > td:nth-child(2)\" would find the second column of an HTML table.\n\n**Warning**: Websites change often! So if you are going to scrape a lot of data, it is probably worthwhile to save and date a copy of the website. Otherwise, you may return after some time and your scraping code will include all of the wrong CSS selectors.\n\nAlthough you can [learn how to use CSS Selectors by hand]([CSS Selectors](https://css-tricks.com/how-css-selectors-work/)), we will use a shortcut by installing the [Selector Gadget](http://selectorgadget.com/) for Chrome. \n\nYes, you must have the Chrome web browser installed to do this! You \"teach\" the Selector Gadget which data you are interested in on a web page, and it will show you the CSS Selector for this data. We will eventually use this selector in `R`.\n\nFirst watch the [Selector Gadget](http://selectorgadget.com/) video and install the Chrome Extension.\n\nHead over to the [Macalester Registrar's Fall 2021 class schedule](https://www.macalester.edu/registrar/schedules/2021fall/class-schedule/). Click the selector gadget icon in the top right corner of Chrome (you may need to click on the puzzle piece and then the pin icon next to the Selector). As you mouse over the webpage, different parts will be highlighted in orange. Click on the first course number, `AMST 194-01`. You'll notice that the Selector Gadget information in the lower right describes what you clicked on:\n\n```{r echo=FALSE,fig.cap=\"The Selector Gadget in action: Mousing over the course number (left), and the result pane after clicking on the course number (right).\"}\nknitr::include_graphics(\"images/SelectorGadgetActionShot2.png\")\n```\n\nScroll through the page to verify that only the information you intend (the course number) is selected. The selector panel shows the CSS selector (`.class-schedule-course-number`) and the number of matches for that CSS selector (763).\n\nNow that we have the selector for the course number, let's find the selector for the days of the week. Clear the selector by clicking the \"Clear\" button on the result pane, and then click the `MWF` under days for `AMST 194-01`. You will notice that the selector was too broad and highlighted information we don't want. You need to teach Selector Gadget a correct selector by clicking the information you **don't want** to turn it red. Once this is done, you should have 763 matches and a CSS selector of `.class-schedule-course-title+ .class-schedule-label`.\n\n```{r echo=FALSE,fig.cap=\"Results for the Selector Gadget after selecting the day field.\"}\nknitr::include_graphics(\"images/SelectorGadgetDay2.png\")\n```\n\n```{exercise}\nRepeat the process above to find the correct selectors for the following fields. Make sure that each matches 763 results:\n```\n\n  1) Course Number\n  2) Course Name\n  3) Day\n  4) Time\n  5) Room\n  6) Instructor\n  7) Avail. / Max\n\n\n\n\n### Retrieving Data Using `rvest` and CSS Selector {-}\n\nNow that we have identified CSS selectors for the information we need, let's fetch the data in `R`. We will be using the `rvest` package, which retrieves information from a webpage and turns it into R data tables:\n\n```{r}\nfall2021 <- read_html(\"https://www.macalester.edu/registrar/schedules/2021fall/class-schedule\")\n```\n\nOnce the webpage is loaded, we can retrieve data using the CSS selectors we specified earlier. The following code retrieves the course numbers and names as a vector:\n\n```{r}\n# Retrieve and inspect course numbers\ncourse_nums <-\n  fall2021 %>%\n  html_nodes(\".class-schedule-course-number\") %>%\n  html_text()\nhead(course_nums)\n\n# Retrieve and inspect course names\ncourse_names <-\n  fall2021 %>%\n  html_nodes(\".class-schedule-course-title\") %>%\n  html_text()\nhead(course_names)\n\n```\n\nAt the end of each course number entry is a 5 digit number, which is CRN number used internally for the registrar's office. Let's put that in its own variable.\n\nTo clean up the course number data, we can chop off the last 6 characters of each entry using the command `sub_str` from the `stringr` package:^[This is a simple example of text processing with regular expressions. We'll learn how to deal with more complicated situations in the text processing unit.]\n\n```{r}\ncourse_nums_clean <- stringr::str_sub(course_nums, end = nchar(course_nums) - 6)\nhead(course_nums_clean)\n\ncrn <- stringr::str_sub(course_nums, start = nchar(course_nums) - 4)\nhead(crn)\n\ncourse_df <- tibble(number = course_nums_clean,crn = crn, name = course_names)\nhead(course_df)\n```\n\nWhat happens when we try to grab the instructors in the same manner?\n\n```{r}\ncourse_instructors <-\n  fall2021 %>%\n  html_nodes(\".class-schedule-label:nth-child(6)\") %>%\n  html_text()\nhead(course_instructors)\n```\n\nIn front of each entry is a bunch of spaces and \"Instructor: \", which we don't really need stored in every entry of our data table. This is because the website is set up in a responsive manner to change when the browser window is narrowed or you are on a mobile device. \n\n```{r echo=FALSE,out.width=500,fig.cap=\"View of the schedule when the browser window is narrower.\"}\nknitr::include_graphics(\"images/registrar-narrow.png\")\n```\n\nTo clean up the data, we can chop off the white space with `trimws` and then first 12 characters of each entry using the command `sub_str` from the `stringr` package:^[This is a simple example of text processing with regular expressions. We'll learn how to deal with more complicated situations in the text processing unit.]\n\n```{r}\ncourse_instructors_short <- stringr::str_sub(trimws(course_instructors), start = 13)\nhead(course_instructors_short)\n```\n\n```{exercise}\nCreate a data table that contains all the information about courses you found selectors for earlier (7 columns). Do not include any extraneous information like \"Instructor: \".\n\n```\n\n\n```{exercise} \nCreate a chart that shows the number of sections offered per department. *Hint: The department is a substring of the course number*.^[Yes, COMP, STAT, and MATH are the same department, but for this exercise you can just show the results by four letter department code, e.g., with COMP, STAT, and MATH separate.] \n\n```\n\n```{exercise}\nAnalyze the typical length of course names by department. To do so, create a `dplyr` pipeline that creates a new data table based on your courses data table, with the following changes:\n```\n\n  1) New columns for the length of the title of a course. Hint: `nchar`.\n  2) Remove departments that have fewer than 10 sections of courses. To do so, group by department, then remove observations in groups with fewer than 10 sections (Hint: use `filter` with `n()`). Then `ungroup` the data so it flattens it back into a regular data table. This is one of the rare cases when we will use `group_by` without `summarize`.\n  3) Create a visualization of the differences across groups in lengths of course names. Think carefully about the visualization you should be using!\n\n\n\n*Note: If you'd like to see the html code for a website, in Chrome go to View > Developer > Developer Tools. Through this, we can see that all of the details about the course such as gen. ed. requirements, distributional requirements, and course description are contained on external links the correspond to the CRN numbers (#####): https://webapps.macalester.edu/registrardata/classdata/Fall2021/##### If you'd like a challenge, use that CRN variable we created above to pull out the description and gen ed. requirements for each class and join that data with the course information data table.*\n\n\n### Web Scraping in Python {-}\n\nIf you prefer to use Python rather than `R`, there are also great web scraping tools in Python. The equivalent to `rvest` in Python is called **BeautifulSoup**. Here is a reference for learning web scraping in Python:\n\n- [Web Scraping with Python](https://www.amazon.com/Web-Scraping-Python-Collecting-Modern/dp/1491910291/), by Ryan Mitchell, O'Reilly, 2015 (the second version is [here](https://www.amazon.com/Web-Scraping-Python-Collecting-Modern-dp-1491985577/dp/1491985577/ref=dp_ob_title_bk))\n\n## Additional Practice: Analyze WNBA Players {-}\n\n```{exercise}\n\nThis is an open-ended activity that asks you to analyze data from [Basketball-Reference.com](https://www.basketball-reference.com/wnba/years/2021_per_game.html). For this task, you will need to scrape at Women's NBA players statistics from 2021. You are welcome to pursue an analysis that interests you about these players. Here are some examples you might choose:\n\n* Which players are \"the most valuable\" players?\n\n* How do teams compare in terms of their players?\n\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles/styles.css"],"toc":true,"output-file":"15-Data_Scraping.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","code-copy":true,"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}