{
  "hash": "52dcec9487a0d275b683ad57e044bd2d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Bivariate Visualizations\n---\n\n\n\n\n\n## Learning Goals {-}\n\n- Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative)\n- Create basic bivariate visualizations based on real data\n\nYou can download a template .Rmd of this activity [here](template_rmd/04-Bivariate_Viz_Assign.Rmd). Put the file in the existing `Assignment_03` folder within your `COMP_STAT_112` folder.\n\n## Alterative Text for Visualizations {-}\n\nYou should write alt text for every visualization to create. \n\nFrom the last activity: Alt text should concisely articulate (1) what your visualization is (e.g. a bar chart showing which the harvest rate of cucumbers), (2) a one sentence description of the what you think is the most important takeaway your visualization is showing, and (3) a link to your data source if it's not already in the caption (check out this [great resource on writing alt text for data visualizations](https://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81)). \n\nTo add the alt text to your the HTML created from knitting the Rmd, you can include it as an option at the top of your R chunk. For example: \\{r, fig.alt = \"Bar chart showing the daily harvest of cucumbers. The peak cucumber collection day is August 18th\"\\}. In this activity, there will be prompts in the template Rmd but you should try to continue doing this for future assignments.\n\n## Bivariate Visualizations {-}\n\nThe outcome of the 2016 presidential election surprised many people.  In this activity we  will analyze data from the 2016 presidential election. To better understand it ourselves, we'll explore county-level election outcomes and demographics.  The data set, prepared by Alicia Johnson, combines 2008/2012/2016 county-level election returns from [Tony McGovern  on github](https://github.com/tonmcg/County_Level_Election_Results_12-16), county-level demographics from the `df_county_demographics` data set within the `choroplethr` R package, and red/purple/blue state designations from [http://www.270towin.com/](http://www.270towin.com/).\n\n### Getting to know the dataset {-}\n\n\n\n::: {.cell}\n\n```{.example .cell-code}\nBegin by loading the [election data](data/electionDemographics16.csv) from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\" and getting to know the data. Write out R functions to get to know the data using the prompts below to guide you.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\"\nelect <- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\")\n\n# Check out the first rows of elect.  What are the units of observation?\n\n\n# How much data do we have?\n\n\n# What are the names of the variables?\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data from \"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\"\nelect <- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/electionDemographics16.csv\")\n## Error in open.connection(structure(4L, class = c(\"curl\", \"connection\"), conn_id = <pointer: 0x0000000000000267>), : Recv failure: Connection was reset\n\n# Check out the first rows of elect.\n# The units of observation are county election results\n#  The variables are county name, vote counts for parties and total for presidential elections, and more\nhead(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n# There are 3,112 counties and 34 variables\ndim(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n\n# See the long list below\nnames(elect)\n## Error in eval(expr, envir, enclos): object 'elect' not found\n```\n:::\n\n\n</details>\n\\\n\n\n\n\n::: {.cell}\n\n```{.example .cell-code}\nExplore the win column:\n    The `winrep_2016` variable indicates whether or not the Republican (Trump) won the county in 2016, thus is *categorical*.  Let's construct both numerical and visual summaries of Trump wins/losses.  (Before you do, what do you anticipate?) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a table (a numerical summary) of the number of counties that Trump won/lost\ntable(xxx) # fill in the xxx\n\n# Attach a library needed for ggplots\nlibrary(xxx)\n\n# Construct a bar chart (a visual summary) of this variable.\nggplot(xxx, aes(xxx)) +\n  geom_xxx()\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a table (a numerical summary) of the number of counties that Trump won/lost\ntable(elect$winrep_2016)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# Attach a library needed for ggplots\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Construct a bar chart (a visual summary) of this variable.\nggplot(elect, aes(x = winrep_2016)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n</details>\n\n\\\n\n\n\n::: {.cell name='Explore Vote Percentages'}\n\n```{.example .cell-code}\nThe `perrep_2016` variable includes a bit more detail about Trump's support in each county.    \n\n```\n:::\n\n\n\na. Since it's *quantitative* we need different tools to visually explore the variability in `perrep_2016`.  To this end, construct & interpret both a histogram and density plot of `perrep_2016`.  (Before you do, what do you anticipate?)    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram\nggplot(elect, aes(xxx)) +\n  geom_xxx(color = \"white\")\n\n# density plot\nggplot(elect, aes(xxx)) +\n  geom_xxx()\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram\nggplot(elect, aes(x = perrep_2016)) +\n  geom_histogram(color = \"white\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# density plot\nggplot(elect, aes(x = perrep_2016)) +\n  geom_density()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\nThe vast majority of counties in the U.S. had a Republican majority vote (> 50%) within that county. \n\n\n</details>\n\n\nb. Thus far, we have a good sense for how Trump’s support varied from county to county. We don’t yet have a good sense for *why*. What other variables (ie. county features) might explain some of the variability in Trump’s support from county to county?  Which of these variables do you think will be the best predictors of support?  The worst?    \n\n\n<details>\n  <summary>Solution</summary>\nMaybe past election history and information about the people that live there and the social culture and values. Let's see...\n</details>\n\n\n\n### Background on visualizing relationships {-}\n\nWe've come up with a list of variables that might explain some of the variability in Trump's support from county to county.  Thus we're interested in the relationship between:    \n\n- **<span style=\"color:red\">response variable</span>**: the variable whose variability we would like to explain (Trump's percent of the vote)    \n- **<span style=\"color:red\">predictors</span>**:  variables that might explain some of the variability in the response (percent white, per capita income, state color, etc)\n\n\nOur goal is to construct visualizations that allow us to examine/identify the following features of the relationships among these variables:    \n\n- relationship *trends* (direction and form)   \n- relationship *strength* (degree of variability from the trend)    \n- *outliers* in the relationship\n\nBefore constructing visualizations of the relationship among any set of these variables, we need to understand what features these should have.  As with univariate plots, the appropriate visualization also depends upon whether the variables are quantitative or categorical. \n\nRecall some **basic rules in constructing graphics:** \n\n- Each **quantitative variable** requires a new axis.  (We'll discuss later what to do when we run out of axes!)    \n- Each **categorical variable** requires a new way to \"group\" the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping)    \n- For visualizations in which **overlap** in glyphs or plots obscures the patterns, try faceting or transparency. \n\n\n\n\n\n\n::: {.cell name='Mock-Ups'}\n\n```{.example .cell-code}\nConsider a subset  of the variables: \n\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'fd' not found\n```\n\n\n:::\n:::\n\n\n\nIn groups, sketch on paper a mock-up of a visualization of the relationship between the given pair of variables (i.e., what type of chart is appropriate to demonstrate the relationship?):\n\na. The relationship between `perrep_2016` (the response) and `perrep_2012` (the predictor).    \n\nb. The relationship between `perrep_2016` (the response) and `StateColor` (the predictor).  Think: how might we modify the below density plot of `perrep_2016` to distinguish between counties in red/purple/blue states?    \n\n    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016)) +\n  geom_density()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\nc. The relationship between Trump's county-levels wins/losses `winrep_2016` (the response) and `StateColor` (the predictor).  Think: how might we modify the below bar plot of `winrep_2016` to distinguish between counties in red/purple/blue states? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = winrep_2016)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\n### Visualizing quantitiative vs quantitative relationships {-}\n\nLet's start by exploring the relationship between Trump's 2016 support (`perrep_2016`) and Romney's 2012 support (`perrep_2012`), both quantitative variables.    \n\n\n\n::: {.cell name='Scatterplots and Glyphs'}\n\n```{.example .cell-code}\nBoth `perrep_2016` and `perrep_2012` are quantitative, thus require their own axes.  Traditionally, the response variable (what we are trying to predict or explain) is placed on the y-axis.  Once the axes are set up, each case is represented by a \"glyph\" at the coordinates defined by these axes.    \n\n```\n:::\n\n\n\na. Make a scatterplot of `perrep_2016` vs `perrep_2012` with different glyphs: points or text.    \n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just a graphics frame\nggplot(elect, aes(y = perrep_2016, x = perrep_2012))\n\n# add a layer with \"point\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point()\n\n# add a layer with symbol glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(shape = 3)\n\n# add a layer with \"text\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_text(aes(label = abb))\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just a graphics frame\nggplot(elect, aes(y = perrep_2016, x = perrep_2012))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# add a layer with \"point\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# add a layer with symbol glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(shape = 3)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n# add a layer with \"text\" glyphs\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_text(aes(label = abb))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\\\n\nb. Summarize the relationship between the Republican candidates' support in 2016 and 2012.  Be sure to comment on:    \n        - the strength of the relationship (weak/moderate/strong)    \n        - the direction of the relationship (positive/negative)    \n        - outliers (In what state do counties deviate from the national trend?  Explain why this might be the case)    \n\n\n<details>\n  <summary>Solution</summary>\n\nThere is a strong positive relationship between the Republican support from 2012 to 2016, meaning that if a county highly favors a Republican candidate in 2012, they were likely to highly favor a Republican in 2016. Counties in Utah seems to not quite follow this pattern with lower support in 2016 than what you'd expect given the support in 2012. This is because the 2012 candidate was from Utah (data context!). \n\n</details>\n\n\\\n\n\n\n\n::: {.cell name='Capture the Trend with \\'smooths\\''}\n\n```{.example .cell-code}\nThe trend of the relationship between `perrep_2016` and `perrep_2012` is clearly positive and (mostly) linear.  We can highlight this trend by adding a model \"smooth\" to the plot.    \n\n```\n:::\n\n\n\na. Add a layer with a model smooth:  \n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth()\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\\  \n\nb. Construct a new plot that contains the model smooth but does not include the individual cases (eg: point glyphs).    \n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_smooth()\n## Error in eval(expr, envir, enclos): object 'elect' not found\n```\n:::\n\n\n</details>\n\n\\\n\nc. Notice that there are gray bands surrounding the blue model smooth line.  What do these gray bars illustrate/capture and why are they widest at the \"ends\" of the model?  \n\n<details>\n  <summary>Solution</summary>\nThere are fewer data points at the \"ends\" so there is more uncertainty about the relationship.\n</details>\n\n\nd. By default, `geom_smooth` adds a smooth, localized model line.  To examine the \"best\" *linear model*, we can specify `method=\"lm\"`:    \n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n:::\n\n\n\n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n::: {.cell name='Modify the Scatterplots'}\n\n```{.example .cell-code}\nAs with univariate plots, we can change the aesthetics of scatterplots.    \n\n```\n:::\n\n\n\na. Add appropriate axis labels to your scatterplot.  Label the y-axis \"Trump 2016 support (%)\" and label the x-axis \"Romney 2012 support (%)\".    \nb. Change the color of the points.    \nc. Add some *transparency* to the points.  NOTE: `alpha` can be between 0 (complete transparency) and 1 (no transparency).      \nd. Why is transparency useful in this particular graphic?\n   \n   \n   \n<details>\n  <summary>Solution</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(y = perrep_2016, x = perrep_2012)) +\n  geom_point(color = \"red\", alpha = 0.1) +\n  labs(x = \"Romney 2012 support (%)\", y = \"Trump 2016 support (%)\") + \n  theme_classic()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n</details>\n \n \\\n \n    \n\n\n::: {.cell name='More Scatterplots'}\n\n```{.exercise .cell-code}\n2012 results aren't the only possible predictor of 2016 results.  Consider two more possibilities.    \n\n```\n:::\n\n\n\na. Construct a scatterplot of `perrep_2016` and `median_rent`.  Summarize the relationship between these two variables.    \nb. Construct a scatterplot of `perrep_2016` and `percent_white`.  Summarize the relationship between these two variables.    \nc. Among `perrep_2012`, `median_rent` and `percent_white`, which is the best predictor of `perrep_2016`?  Why?    \n\n### Visualizing quantitative vs. categorical relationships {-}\n\nConsider a univariate histogram and density plot of `perrep_2016`:    \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'g1' not found\n```\n\n\n:::\n:::\n\n\n\nTo visualize the relationship between Trump's 2016 support (`perrep_2016`) and the `StateColor` (categorical) we need to incorporate a grouping mechanism.  Work through the several options below.    \n\n\n\n::: {.cell name='Side-by-Side Density Plots'}\n\n```{.example .cell-code}\nWe can show density plots for each state color next to each other:\n```\n:::\n\n\n\na. Construct a density plot for each group. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density()\n```\n:::\n\n\n\nb.  Notice that `ggplot` randomly assigns colors to group based on alphabetical order.  In this example, the random color doesn't match the group itself (red/purple/blue)!  We can fix this:    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n```\n:::\n\n\n\nc. The overlap between the groups makes it difficult to explore the features of each.  One option is to add *transparency* to the density plots:   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n```\n:::\n\n\n\nd. Yet another option is to separate the density plots into separate \"facets\" defined by group:  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ StateColor)\n```\n:::\n\n::: {.cell name='Side-by-Side Histograms'}\n\n```{.exercise .cell-code}\nLet's try a similar strategy using histograms to illustrate the relationship between `perrep_2016` and `StateColor`.    \n```\n:::\n\n\n\na. Start with the default histogram:    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(elect, aes(x = perrep_2016, fill = StateColor)) +\ngeom_histogram(color = \"white\")\n```\n:::\n\n\n\nb. That's not very helpful!  Separate the histograms into separate facets for each `StateColor` group.    \n\n\n\n::: {.cell name='More Options!'}\n\n```{.example .cell-code}\nDensity plots and histograms aren't the only type of viz we might use...    \n```\n:::\n\n\n\na. Construct side-by-side violins and side-by-side boxplots (see description below).    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# violins instead\nggplot(elect, aes(y = perrep_2016, x = StateColor)) +\n  geom_violin()\n\n# boxes instead\nggplot(elect, aes(y = perrep_2016, x = StateColor)) +\n  geom_boxplot()\n```\n:::\n\n\n\nBox plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable: \n    \n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in knitr::include_graphics(\"images/Boxplot.png\"): Cannot find the file(s): \"images/Boxplot.png\"\n```\n\n\n:::\n:::\n\n\n\nb. In the future, we'll typically use *density plots* instead of histograms, violins, and boxes.  Explain at least one pro and one con of the density plot.    \n  \n\n\n::: {.cell}\n\n```{.exercise .cell-code}\nLet's not forget the most important purpose of these visualizations!  Summarize the relationship between Trump's 2016 county-level support among red/purple/blue states.  \n\n```\n:::\n\n\n\n### Visualizing categorical vs categorical relationships {-}\n\nFinally, suppose that instead of Trump's percentage support, we simply want to explore his county-level wins/losses:    \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'elect' not found\n```\n\n\n:::\n:::\n\n\n\n\nSpecifically, let's explore the relationship between `winrep_2016` and `StateColor`, another categorical variable.  \n\n\n\n\n::: {.cell name='Side-by-side bar plots'}\n\n```{.exercise .cell-code}\nWe saw above that we can incorporate a new categorical variable into a visualization by using grouping features such as color or facets.  Let's add information about `StateColor` to our bar plot of `winrep_2016`.    \n\n```\n:::\n\n\n\na. Construct the following 4 bar plot visualizations.    \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # a stacked bar plot\n    ggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n      geom_bar()\n    \n    # a side-by-side bar plot\n    ggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n      geom_bar(position = \"dodge\")\n    \n    # a proportional bar plot\n    ggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n      geom_bar(position = \"fill\")\n    \n    # faceted bar plot\n    ggplot(elect, aes(x = StateColor, fill = winrep_2016)) +\n      geom_bar() +\n      facet_wrap(~winrep_2016)\n    ```\n    :::\n\n\n\nb. Name one pro and one con of using the \"proportional bar plot\" instead of one of the other three options.    \n\nc. What's your favorite bar plot from part (a)?  Why?    \n   \n### Practice {-}\n\n#### Hot Dogs {-}\n\nIn the annual Nathan's hot dog eating contest, people compete to eat as many hot dogs as possible in ten minutes.  Data on past competitions were compiled by Nathan Yau for \"Visualize This: The FlowingData Guide to Design, Visualization, and Statistics\": \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotdogs <- read_csv(\"http://datasets.flowingdata.com/hot-dog-contest-winners.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nAddress the following:\n   \na. Construct a visualization of the winning number of hot dogs by year. THINK: Which is the response variable?      \nb. Temporal trends are often visualized using a line plot.  Add a `geom_line()` layer to your plot from part (a).       \nc. Summarize your observations about the temporal trends in the hot dog contest.    \n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nAll but two of the past winners are from the U.S. or Japan:\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hotdogs$Country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Germany         Japan        Mexico United States \n            1             9             1            20 \n```\n\n\n:::\n:::\n\n\n\nUse the following code to *filter* out just the winners from U.S. and Japan and name this `hotdogsSub`.  (Don't worry about the code itself - we'll discuss similar syntax later in the semester!)    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nhotdogsSub <- hotdogs %>%\n  filter(Country %in% c(\"Japan\", \"United States\"))\n```\n:::\n\n\n\na. Using a density plot approach *without* facets, construct a visualization of how the number of hot dogs eaten varies by country.\nb. Repeat part a using a density plot approach *with* facets.    \nc. Repeat part a using *something other than* a density plot approach.  (There are a few options!)    \nd. Summarize your observations about the number of hot dogs eaten by country.    \n\n\n#### The Bechdel Test {-}\n\nRecall the \"Bechdel test\" data from the previous activity.  As a reminder, the “Bechdel test” tests whether movies meet the following criteria:    \n\n- there are $\\ge$ 2 female characters    \n- the female characters talk to each other    \n- at least 1 time, they talk about something other than a male character    \n\nIn the fivethirtyeight.com article [\"The Dollar-And-Cents Case Against Hollywood's Exclusion of Women\"](http://fivethirtyeight.com/features/the-dollar-and-cents-case-against-hollywoods-exclusion-of-women/), the authors analyze which Hollywood movies do/don't pass the test.  Their data are available in the `fivethirtyeight` package:    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fivethirtyeight)\ndata(bechdel)\n```\n:::\n\n\n    \nIn investigating budgets and profits, the authors \"focus on films released from 1990 to 2013, since the data has significantly more depth since then.\"  Use the following code to filter out just the movies in these years and name the resulting data set `Beyond1990` (don't worry about the syntax):    \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nBeyond1990 <- bechdel %>%\n  filter(year >= 1990)\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nAddress the following:\n  \na. Construct a visualization that addresses the following research question: Do bigger budgets (`budget_2013`) pay off with greater box office returns (`domgross_2013`)?  In constructing this visualization, add a smooth to highlight trends and pay attention to which of these variables is the response.       \nb. Using your visualization as supporting evidence, answer the research question.          \nc. Part of the fivethirtyeight article focuses on how budgets (`budget_2013`) differ among movies with different degrees of female character development (`clean_test`).  Construct a visualization that highlights the relationship between these two variables.  There are many options - some are better than others!       \nd. Using your visualization as supporting evidence, address fivethirtyeight's concerns.  \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nNOTE: The following exercise is inspired by a similar exercise proposed by Albert Kim, one of the `fivethirtyeight` package authors.    \n    Return to the fivethirtyeight.com article and examine the plot titled \"The Bechdel Test Over Time\".    \n```\n:::\n\n\n\na. Summarize the trends captured by this plot.  (How has the representation of women in movies evolved over time?)   \nb. Recreate this plot from the article!  \n\nTo do so, you'll need to create a new data set named `newbechdel` in which the order of the Bechdel categories (`clean_test`) and the year categories (`yearCat`) match those used by fivethirtyeight.  Don't worry about the syntax:    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nnewbechdel <- bechdel %>%\nmutate(clean_test = factor(bechdel$clean_test, c(\"nowomen\", \"notalk\", \"men\", \"dubious\", \"ok\"))) %>%\nmutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))\n```\n:::\n\n\n\nFurther, you'll need to add the following layer in order to get a color scheme that's close to that in the article: \n    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_fill_manual(values = c(\"red\", \"salmon\", \"pink\", \"steelblue1\", \"steelblue4\"))\n```\n:::\n\n\n    \nNOTE: that your plot won't look *exactly* like the authors', but should be close to this:    \n    \n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in knitr::include_graphics(\"images/bechdel_hist.jpeg\"): Cannot find the file(s): \"images/bechdel_hist.jpeg\"\n```\n\n\n:::\n:::\n\n\n\n## Appendix: R Functions {.unnumbered}\n\n### Data Wrangling R functions {.unnumbered}\n\n| Function/Operator |                 Action                 |                       Example |\n|-------------------------|:---------------------------:|------------------:|\n| `filter(data,condition)`        |   Provide rows of a data set that satisfy a condition   |   `bechdel %>% filter(year >= 1990)` |\n| `mutate(data,varname =)`        |   Create a new variable  |   `bechdel %>% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))` |\n| `cut(x,breaks)`        |   Cut a quantitative variable into categories by the break points  |   `bechdel %>% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5)))` |\n\n### ggplot2 foundation functions {.unnumbered}\n\n| Function/Operator          |                                           Action                                           |                                        Example |\n|-------------------------|:---------------------------:|------------------:|\n| `ggplot(data)`             |            Create a blank canvas that can create a visualization based on data             |                       `ggplot(data = elect)` |\n| `+ geom_bar(aes(x))`       |                                       Add a bar plot                                       |                `geom_bar(aes(x = winrep_2016))` |\n| `+ geom_bar(aes(x,fill),position='fill')`       |                                       Add a propotional bar plot                                       |                `geom_bar(aes(x = winrep_2016,fill = StateColor),position='fill')` |\n| `+ geom_bar(aes(x,fill),position='dodge')`       |                                       Add a side-by-side bar plot                                       |                `geom_bar(aes(x = winrep_2016,fill = StateColor),position='dodge')` |\n| `+ geom_smooth(aes(x,y))`   |                                     Add a smoothed average curve of scatterplot                                      |        `geom_smooth()` |\n| `+ geom_smooth(aes(x,y),method='lm')`   |                                     Add a best fit line to a scatterplot                                      |        `geom_smooth(method='lm')` |\n| `+ geom_point(aes(x,y))`   |                                     Add a scatterplot                                      |        `geom_bar(aes(x = year,y=budget_2013))` |\n| `+ geom_text(aes(x,y,label))`   |                                     Add a text to a plot                                     |           `geom_text(aes(label=abb))` |\n| `+ facet_wrap(~x)`   |                                     Facet a plot (break into subplots based on groups)                                    |           `facet_wrap(~StateColor)` |\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}