{
  "hash": "a52a2b8a9feb5fdc6e09156ee21b9cd0",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n# (PART) Data Wrangling {-}\n# Six Main Verbs\n\n## Learning Goals {-}\n\n- Understand and be able to use the following verbs appropriate: `select`, `mutate`, `filter`, `arrange`, `summarize`, `group_by`\n- Develop an understanding what code will do conceptually without running it\n- Develop working knowledge of working with dates and `lubridate` functions\n\nYou can download a template .Rmd of this activity [here](template_rmd/07-Six_Main_Verbs_Assign.Rmd). Add it to a folder called `Assignment_05` in your `COMP_STAT_112` folder.\n\n\n\n\n## Data Wrangling Introduction {-}\n\n### Example: US Births {-}\n\nThe number of daily births in the US varies over the year and from day to day. What's surprising to many people is that the variation from one day to the next can be huge: some days have only about 80% as many births as others. Why? In this activity we'll use basic data wrangling skills to understand some drivers of daily births.\n\nThe data table `Birthdays` in the `mosaicData` package gives the number of births recorded on each day of the year in each state from 1969 to 1988.^[The `fivethirtyeight` package has more recent data.] \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: A subset of the initial birthday data.\n\n|state |date       | year| births|\n|:-----|:----------|----:|------:|\n|AK    |1969-01-01 | 1969|     14|\n|AL    |1969-01-01 | 1969|    174|\n|AR    |1969-01-01 | 1969|     78|\n|AZ    |1969-01-01 | 1969|     84|\n|CA    |1969-01-01 | 1969|    824|\n|CO    |1969-01-01 | 1969|    100|\n\n\n:::\n:::\n\n\n### Tidy Data {-}\n\nAdditional reading: \n\n* [Wickham, Tidy Data](https://www.jstatsoft.org/article/view/v059i10)\n* [Wickham and Grolemund, Tidy Data](http://r4ds.had.co.nz/tidy-data.html)\n* [Baumer, Kaplan, and Horton, Tidy Data](https://mdsr-book.github.io/mdsr2e/ch-dataII.html#tidy-data)\n\n\\medskip\n\nThere are different ways to store and represent the same data. In order to be consistent and to also take advantage of the vectorized nature of `R`, the `tidyverse` packages we'll use provide a set of three interrelated rules/conventions for a dataset to be `tidy`:\n\n1. Each variable must have its own column.\n2. Each observation must have its own row.\n3. Each value must have its own cell.\n\n\nOne of the first things we'll often do when acquiring new data is to \"tidy it\" into this form. For now, we can already start thinking of a data frame (tibble) as a table whose rows are the individual cases and whose columns are the variables on which we have information for each individual case. The first figure from the [`tidyr` cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf) summarizes this principle. \n\n### Data Verbs {-}\n\nAdditional reading:\n\n* [Wickham and Grolemund, Data Transformation](http://r4ds.had.co.nz/transform.html)\n* [Baumer, Kaplan, and Horton, A Grammar for Data Wrangling](https://mdsr-book.github.io/mdsr2e/ch-dataI.html)\n\nThere are six main data transformation verbs in the `dplyr` library. Each verb takes an input data frame along with additional arguments specifying the action, and returns a new data frame. We'll examine them in three pairs. \n\n\\medskip\n\n#### Verbs that change the variables (columns) but not the cases (rows) {-}\n\n\\medskip\n\nThe first two verbs change which variables (columns) are included in the data frame, but preserve the same set of cases (rows).\n\n- **`select()`** chooses which columns to keep, or put another way, deletes those colummns that are not selected. To specify the columns, we can either list them out, or use functions like `starts_with()`, `ends_with()`, or `contains()` to specify the titles of the variables we wish to keep.\n\n- **`mutate()`** adds one or more columns to the data frame. Each column is a function of the other columns that is applied on a row by row basis. For example, we can use arithmetic operations like adding two other variables or logical operations like checking if two columns are equal, or equal to a target number.\n\n\n::: {.cell name='select and mutate'}\n\n```{.example .cell-code}\nConsider the `Birthdays` data\n```\n:::\n\n\na. Add two new variables to the `Birthdays` data: one that has only the last two digits of the year, and one that states whether there were more than 100 births in the given state on the given date.   \nb. Then form a new table that only has three columns: the state and your two new columns.   \nc. What does the following operation return (describe the output): `select(Birthdays, ends_with(\"te\"))`?\n\n<details>\n<summary>Solution</summary>\n\nThe commands for the first two parts are\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBirthdaysExtra <- mutate(Birthdays,\n  year_short = year - 1900,\n  busy_birthday = (births > 100)\n)\n\nBirthdaysExtraTable <- select(\n  BirthdaysExtra, state,\n  year_short, busy_birthday\n)\n\nselect(Birthdays, ends_with(\"te\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state       date\n1    AK 1969-01-01\n2    AL 1969-01-01\n3    AR 1969-01-01\n4    AZ 1969-01-01\n5    CA 1969-01-01\n6    CO 1969-01-01\n```\n\n\n:::\n:::\n\n\nThe operation in (c) provides a data set with only the two columns `state` and `date` because they end in 'te'.\n</details>\n\\\n\n\n#### Verbs that change the cases (rows) but not the variables (columns) {-}\n\n\nThe next two verbs change which cases (rows) are included in the data frame, but preserve the same set of variables (columns).\n\n- **`filter()`** deletes some of the rows by specifying which rows to keep.\n\n- **`arrange()`** reorders the rows according to a specified criteria. To sort in reverse order based on the variable `x`, use `arrange(desc(x))`.\n\n\n::: {.cell name='filter and arrange'}\n\n```{.example .cell-code}\nCreate a table with only births in Massachusetts in 1979, and sort the days from those with the most births to those with the fewest.\n\n```\n:::\n\n\n<details>\n<summary>Solution</summary>\n\n\nWe want to `filter` and then `arrange`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMABirths1979 <- filter(Birthdays, state == \"MA\", year == 1979)\nMABirths1979Sorted <- arrange(MABirths1979, desc(births))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Birthdays in Massachusetts in 1979, sorted from those dates with the most births to those dates with the fewest births.\n\n|state |date       | year| births|\n|:-----|:----------|----:|------:|\n|MA    |1979-09-28 | 1979|    262|\n|MA    |1979-09-11 | 1979|    252|\n|MA    |1979-12-28 | 1979|    249|\n|MA    |1979-09-26 | 1979|    246|\n|MA    |1979-07-24 | 1979|    245|\n|MA    |1979-04-27 | 1979|    243|\n\n\n:::\n:::\n\n\n</details>\n\\\n\nWhen filtering, we often use logical comparison operators like `==`, `>`, `<`, `>=` (greater than or equal to), `<=` (less than or equal to), and `%in%`, which compares the value to a list of entries.^[**Important note about `=` vs. `==`**: A single `=` is an assignment operator that assigns the value after the equal sign to the variable before the equal sign. We saw an example of this above with `year_short = year - 1900`. In order to compare whether two values are the same, we need to use the double equal `==` as in `year == 1979`.] For example, if we want all births in AK, CA, and MA, we can write\n\n```\nfilter(Birthdays, state %in% c(\"AK\",\"CA\",\"MA\"))\n```\n\nThe `c()` here is for concatenate, which is how we form vectors in `R`.\n\n\n\n#### Grouped summaries {-}\n\n\n\n- **`summarize()`** (or equivalently **`summarise()`**) takes an entire data frame as input and outputs a single row with one or more summary statistics, such as `mean()`, `sum()`, `sd()`, `n_distinct()`, or `n()` (which just counts the number of entries/rows). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(Birthdays,\n  total_births = sum(births),\n  average_births = mean(births),\n  nstates = n_distinct(state), ncases = n()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  total_births average_births nstates ncases\n1     70486538       189.0409      51 372864\n```\n\n\n:::\n:::\n\n\nSo `summarize` changes both the cases and the variables. Alone, `summarize` is not all that useful, because we can also access individual variables directly with the dollar sign. For example, to find the total and average births, we can write\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(Birthdays$births)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 70486538\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(Birthdays$births)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 189.0409\n```\n\n\n:::\n:::\n\n\nRather, we will mostly use it to create **grouped summaries**, which brings us to the last of the six main data verbs.\n\n- **`group_by()`** groups the cases of a data frame by a specified set of variables. The size of the stored data frame does not actually change (neither the cases nor the variables change), but then other functions can be applied to the specified groups instead of the entire data set. We'll often use `group_by` in conjunction with `summarize` to get a grouped summary.\n\n\n::: {.cell name='grouped summary'}\n\n```{.example .cell-code}\nConsider the `Birthdays` data again.\n```\n:::\n\n\n  (a) Find the average number of daily births in each year (average across states).\n  (b) Find the average number of daily births in each year, by state.\n\n<details>\n<summary>Solution</summary>\n\nWe have to first group by the desired grouping and then perform a `summarize`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBirthdaysYear <- group_by(Birthdays, year)\nsummarize(BirthdaysYear, average = mean(births))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 Ã— 2\n    year average\n   <int>   <dbl>\n 1  1969    192.\n 2  1970    200.\n 3  1971    191.\n 4  1972    175.\n 5  1973    169.\n 6  1974    170.\n 7  1975    169.\n 8  1976    170.\n 9  1977    179.\n10  1978    179.\n11  1979    188.\n12  1980    194.\n13  1981    195.\n14  1982    198.\n15  1983    196.\n16  1984    197.\n17  1985    202.\n18  1986    202.\n19  1987    205.\n20  1988    210.\n```\n\n\n:::\n\n```{.r .cell-code}\nBirthdaysYearState <- group_by(Birthdays, year, state)\nsummarize(BirthdaysYearState, average = mean(births))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,020 Ã— 3\n# Groups:   year [20]\n    year state average\n   <int> <chr>   <dbl>\n 1  1969 AK       18.6\n 2  1969 AL      174. \n 3  1969 AR       91.3\n 4  1969 AZ       93.3\n 5  1969 CA      954. \n 6  1969 CO      110. \n 7  1969 CT      134. \n 8  1969 DC       75.3\n 9  1969 DE       27.6\n10  1969 FL      292. \n# â„¹ 1,010 more rows\n```\n\n\n:::\n:::\n\n</details>\n\\\n\n### Piping {-}\n\nAdditional reading: \n\n* [Wickham and Grolemund, Combining Multiple Operations with the Pipe](https://r4ds.had.co.nz/transform.html#combining-multiple-operations-with-the-pipe)\n* [Wickham and Grolemund, Pipes](http://r4ds.had.co.nz/pipes.html)\n\nPipes offer an efficient way to execute multiple operations at once. Here is a more efficient way to redo Example 7.2 with **the pipe**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQuickMABirths1979 <-\n  Birthdays %>%\n  filter(state == \"MA\", year == 1979) %>%\n  arrange(desc(births))\n```\n:::\n\n\nWith the pipe notation, `x %>% f(y)` becomes `f(x,y)`, where in the first line here, `x` is `Birthdays`, the function `f` is `filter`, and `y` is `state == \"MA\", year == 1979`. The really nice thing about piping is that you can chain together a bunch of different operations without having to save the intermediate results. This is what we have done above by chaining together a `filter` followed by an `arrange`.\n\n### Manipulating Dates {-}\n\nAdditional reading: \n\n* [Wickham and Grolemund, Date and Times with `lubridate`](http://r4ds.had.co.nz/dates-and-times.html)\n\nThe `date` variable in `Birthdays` prints out in the conventional, human-readable way.  But it is actually in a format (called `POSIX` date format) that automatically respects the order of time. The `lubridate` package contains helpful functions that will extract various information about any date. Here are some you might find useful:\n\n* `year()`\n* `month()`\n* `week()`\n* `yday()` --- gives the day of the year as a number 1-366.  This is often called the \"Julian day.\"\n* `mday()` --- gives the day of the month as a number 1-31\n* `wday()` --- gives the weekday (e.g. Monday, Tuesday, ...).  Use the optional argument `label = TRUE` to have the weekday spelled out rather than given as a number 1-7.\n\nUsing these `lubridate` functions, you can easily look at the data in more detail. For example, we can add columns to the date table for month and day of the week:^[The `label = TRUE` argument tells `month` to return a string abbreviation for the month instead of the month's number.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBirthdays <-\n  Birthdays %>%\n  mutate(\n    month = month(date, label = TRUE),\n    weekday = wday(date, label = TRUE)\n  )\n```\n:::\n\n\nHere is what the data table looks like with our new columns:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: A subset of the birthday data with additional variables.\n\n|state |date       | year| births|month |weekday |\n|:-----|:----------|----:|------:|:-----|:-------|\n|AK    |1969-01-01 | 1969|     14|Jan   |Wed     |\n|AL    |1969-01-01 | 1969|    174|Jan   |Wed     |\n|AR    |1969-01-01 | 1969|     78|Jan   |Wed     |\n|AZ    |1969-01-01 | 1969|     84|Jan   |Wed     |\n|CA    |1969-01-01 | 1969|    824|Jan   |Wed     |\n|CO    |1969-01-01 | 1969|    100|Jan   |Wed     |\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.example .cell-code}\nMake a table showing the five states with the most births between September 9, 1979 and September 11, 1979, inclusive. Arrange the table in descending order of births.\n```\n:::\n\n\n<details>\n<summary>Solution</summary>\n\nThe plan of attack is to first filter the dates, then group by state, then use a `summarize` to add up totals for each state, and finally arrange them in descending order to find the top 5.^[The verbs `head(n = 5)`, `tail(n = 3)` are often used just after an `arrange` to keep, e.g., only the first 5 entries or last 3 entries, where `n` specifies the number of entries to keep.]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSepTable <-\n  Birthdays %>%\n  filter(date >= ymd(\"1979-09-09\"), date <= ymd(\"1979-09-11\")) %>%\n  group_by(state) %>%\n  summarize(total = sum(births)) %>%\n  arrange(desc(total)) %>%\n  head(n = 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  SepTable[, ],\n  caption = \"States with the\n  most births between September 9, 1979\n  and September 11, 1979, inclusive.\"\n)\n```\n\n::: {.cell-output-display}\n\n\nTable: States with the\n  most births between September 9, 1979\n  and September 11, 1979, inclusive.\n\n|state | total|\n|:-----|-----:|\n|CA    |  3246|\n|TX    |  2347|\n|NY    |  1943|\n|IL    |  1673|\n|OH    |  1408|\n\n\n:::\n:::\n\n</details>\n\\\n\n## Practice Part 1: Baby Names {-}\n\nWe are going to practice the six data verbs on the `babynames` dataset:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: A subset of the babynames data, which runs from 1880-2015 and is provided by the US Social Security Administration.\n\n| year|sex |name      |    n|      prop|\n|----:|:---|:---------|----:|---------:|\n| 1880|F   |Mary      | 7065| 0.0723836|\n| 1880|F   |Anna      | 2604| 0.0266790|\n| 1880|F   |Emma      | 2003| 0.0205215|\n| 1880|F   |Elizabeth | 1939| 0.0198658|\n| 1880|F   |Minnie    | 1746| 0.0178884|\n| 1880|F   |Margaret  | 1578| 0.0161672|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nAdd a new boolean (true or false) variable called `has2000` that indicates whether there were more than 2000 babies of that sex assigned at birth with that name in each year. Display the first six rows of your new table.\n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nFind the number of total babies per year, sorted by most babies to least babies.\n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nFind the twelve most popular names overall (i.e., totaled over all year and sexes), ordered by popularity.\n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nFind the most popular names for males, over all years and ordered by popularity.\n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nFor each line of code below, describe the output passed to the next function. Write your answers as comments in the code. Try to see if you can describe the output without running the code, an important skill to develop! \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbabynames %>%\n  filter( year >= 1900, year < 2000) %>% \n  mutate(YearCat = cut(year, c(1900,1950,2000), right = FALSE, labels = c('Early 1900','Late 1900'))) %>%\n  group_by(sex,YearCat,name) %>%\n  summarize(n = sum(n)) %>%\n  arrange(sex,YearCat, n) %>%\n  group_by(sex,YearCat) %>%\n  mutate(rank = dense_rank(-n))  %>%\n  arrange(sex,rank) %>%\n  head(10)\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nCalculate the number of babies born each decade, and arrange them in descending order. Calculating the decade may be the trickiest part of this question!   \n  \n\n```\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nCalculate the most popular name for each year. Print out the answer for the years 2006-2015. This is tricky, but try Googling for hints.\n\n```\n:::\n\n\n\n## Practice Part 2: US Births {-}\n\nNow we are ready to return to the `Birthdays` data set to investigate some drivers of daily births in the US.\n\n### Seasonality {-}\n\nFor this activity, we need to work with data aggregated across the states.\n\n\n::: {.cell name='Total Across States'}\n\n```{.exercise .cell-code}\nCreate a new data table, `DailyBirths`, that adds up all the births for each day across all the states.  Plot out daily births vs date.\n\n```\n:::\n\n\n***For all of the remaining exercises, start with your `DailyBirths` data frame.***\n\n\n::: {.cell name='Examine Seasonality'}\n\n```{.exercise .cell-code}\n\nTo examine seasonality in birth rates, look at the daily number of births using `DailyBirths` (don't aggregate) by\n\na. week of the year (1-53)\nb. month of the year (January to December)\nc. Julian day (1-366)\n\nWhen are the most babies born? The fewest?\n\n```\n:::\n\n\n\n### Day of the Week {-}\n\n\n::: {.cell name='Examine Patterns within the Week'}\n\n```{.exercise .cell-code}\nTo examine patterns within the week, make a box plot showing the daily number of births by day of the week (use `DailyBirths`). Interpret your results.\n\n```\n:::\n\n\n\n### Holidays {-}\n\n\n\n\n::: {.cell name='Two Year Sample'}\n\n```{.exercise .cell-code}\nPick a two-year span of the `DailyBirths` that falls in the 1980s, say, 1980/1981.  Extract out the data just in this interval, calling it `MyTwoYears`.  (Hint: `filter()`, `year()`).  Plot out the births in this two-year span day by day. Color each date according to its day of the week.  Make sure to choose your font size, line widths, and color scheme to make your figure legible. Explain the pattern that you see.\n\n```\n:::\n\n\n\nThe plot you generate for Exercise \\@ref(exr:two-year) should be generally consistent with the weekend effect and seasonal patterns we have already seen; however, a few days each year stand out as exceptions. We are going to examine the hypothesis that these are holidays.  You can find a data set listing US federal holidays [here](data/US-Holidays.csv).  Read it in as follows:^[The point of the `lubridate::dmy()` function is to convert the character-string date stored in the CSV to a POSIX date-number.]\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError: 'data/US-Holidays.csv' does not exist in current working directory ('C:/Users/Amin Alhashim/Documents/GitHub/alhashimphd/mac-comp112website-f24/src').\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHolidays <- read_csv(\"https://bcheggeseth.github.io/112_fall_2022/data/US-Holidays.csv\") %>%\n  mutate(date = as.POSIXct(lubridate::dmy(date)))\n```\n:::\n\n::: {.cell name='Holidays'}\n\n```{.exercise .cell-code}\nNow let's update the plot from Exercise \\@ref(exr:two-year) to include the holidays.   \n\na. Add a variable to `MyTwoYears` called `is_holiday`. It should be `TRUE` when the day is a holiday, and `FALSE` otherwise. One way to do this is with the transformation verb `%in%`, for instance, `is_holiday = date %in% Holidays$date`.   \nb. Add a `geom_point` layer to your plot that sets the color of the points based on the day of the week and the shape of the points based on whether or not the day is a holiday.   \nc. Finally, some holidays seem to have more of an effect than others. It would be helpful to label them. Use `geom_text` with the holiday data to add labels to each of the holidays. Hints: 1. Start by making a new data table called `MyHolidays` that just contains the holidays in your selected two year window. 2. Start your geometry line with `geom_text(data=MyHolidays)`. 3. You'll have to make up a y-coordinate for each label.  4. You can set the orientation of each label with the `angle` argument; e.g., `geom_text(data=MyHolidays, angle=40, ...)`.\n\n```\n:::\n\n\n\n### Geography {-}\n\n\nIn any way you choose, explore the effect of geography on birth patterns using the original `Birthdays` data. For example, do parents in Minnesota have fewer winter babies than in other states? Which states have the largest increases or decreases in their portion of US births over time? Is the weekend effect less strong for states with a higher percentage of their populations living in rural areas? \n  \nIf you have extra time or want some extra practice, pick any issue (not all of these) that interests you, explore it, and create a graphic to illustrate your findings.\n\n\n### Superstition {-}\n\nThis [article](https://fivethirtyeight.com/features/some-people-are-too-superstitious-to-have-a-baby-on-friday-the-13th/) from FiveThirtyEight demonstrates that fewer babies are born on the 13th of each month, and the effect is even stronger when the 13th falls on a Friday. If you have extra time or want some extra practice, you can try to recreate the first graphic in the article.\n\n\n## Appendix: R Functions {.unnumbered}\n\n### Six Main Verbs {.unnumbered}\n\n| Function/Operator |                 Action                 |                       Example |\n|-------------------------|:---------------------------:|------------------:|\n| `select()`        |   Provides a subset of variables   |   `select(Birthdays, state, date, year, births)` |\n| `mutate()`        |  Creates a new variable |   `mutate(Birthdays, year_short = year - 1900)` |\n| `filter()`        |   Provides a subset of rows |   `filter(Birthdays, state %in% c(\"AK\",\"CA\",\"MA\")) ` |\n| `arrange()`        |   Sorts the rows of a dataset |   `arrange(Birthdays, desc(births)) ` |\n| `summarize()`        |   Collapses rows into summaries of variables across rows |   `summarize(Birthdays,total_births = sum(births), average_births = mean(births), nstates = n_distinct(state), ncases = n()) ` |\n| `group_by()`        |   Collapses rows into summaries of variables across rows |   `group_by(Birthdays, year, state) %>% summarize(average = mean(births))` |\n\n\n### Logical/Boolean Operators {.unnumbered}\n\n| Function/Operator |                 Action                 |                       Example |\n|-------------------------|:---------------------------:|------------------:|\n| `==`        |  Checks whether two items are equal  |   `year == 2000` |\n| `>`        |  Checks whether left is greater than the right |   `year > 2000` |\n| `<`        |   Checks whether left is less than the right |   `year < 2000 ` |\n| `>=`        |   Checks whether left is greater than or equal to right  |   `year >= 2000 ` |\n| `<=`        |   Checks whether left is less than or equal to right |   `year <= 2000` |\n| `!=`        |   Checks whether left is not equal to right |   `year != 2000` |\n| `%in%`        |   Checks whether left is in vector on right |   `state %in% c(\"AK\",\"CA\",\"MA\")` |\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}