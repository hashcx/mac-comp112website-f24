{
  "hash": "02c34e597b17033cac88b2c1a161ff67",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n\n# Categorical Variables as Factors\n\n## Learning Goals {-}\n\n- Understand the difference between a variable stored as a `character` vs. a `factor`\n- Be able to convert a `character` variable to a `factor`\n- Develop comfort in manipulating the order and values of a factor with the `forcats` package to improve summaries and visualizations.\n\nCreate a new Rmd file (save it as 10-Factors.Rmd). Put this file in a folder `Assignment_06` in your `COMP_STAT_112` folder.\n\n- You are used to using template Rmd files but you are ready to create your own! \n    - Look at previous Rmd files and notice patterns. You can copy the top YAML section over and adjust.\n    - Note that if you use \\{exercise\\}, you can copy the text of the exercise and that it will automatically number your exercises! Continue to use \\{r\\} for R chunks.\n    - Make sure to add `fig.alt` for your visualizations!\n- From now on, you'll be expected to create your own Rmd files and make them look clean and organized so that preceptors and instructors can easily read the knitted file and give feedback.\n\n\n\n## Example: Grade Distribution {-}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError: 'data/grades.csv' does not exist in current working directory ('C:/Users/Amin Alhashim/Documents/GitHub/hashcx/mac-comp112website-f24/src').\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGrades <- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/grades.csv\")\nGrades <- Grades %>%\n  select(sid, sessionID, grade) %>%\n  distinct(sid, sessionID, .keep_all = TRUE)\n```\n:::\n\n\n\nWe will continue with the grades data from the previous activity. Here is a sample to remember what it looks like:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\nHere is a bar chart of the grade distribution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Grades, aes(x = grade)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\nWe can also wrangle a table that just has each grade and the number of times it appears:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGradeDistribution <- Grades %>%\n  group_by(grade) %>%\n  summarize(count = n())\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Alternatively, we can use the count() function the creates a variable called n\nGrades %>%\n  count(grade) \n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'GradeDistribution' not found\n```\n\n\n:::\n:::\n\n\n\n\n***What could be improved about this graphic and table?***\n\nThe grades are listed alphabetically, which isn't particularly meaningful. Why are they listed that way? Because the variable `grade` is a character string type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Grades$grade)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\nWhen dealing with categorical variables that take a finite number of values (`levels`, formally), it is often useful to store the variable as a factor, and specify a meaningful order for the levels. \n\nFor example, when the entries are stored as character strings, we cannot use the `levels` command to see the full list of values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(Grades$grade)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\n### Converting to factor {-}\n\nLet's first convert the `grade` variable to a factor:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGrades <- Grades %>%\n  mutate(grade = factor(grade))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\nNow we can see the levels:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(Grades$grade)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\nMoreover, the `forcats` package (part of `tidyverse`) allows us to manipulate these factors. Its commands include the following. \n\n### Changing the order of levels {-}\n   \n- `fct_relevel()`: manually reorder levels   \n- `fct_infreq()`: order levels from highest to lowest frequency   \n- `fct_reorder()`: reorder levels by values of another variable   \n- `fct_rev()`: reverse the current order   \n\n### Changing the value of levels {-} \n\n- `fct_recode()`: manually change levels   \n- `fct_lump()`: group together least common levels   \n\nMore details on these and other commands can be found on the [forcats cheat sheet](https://github.com/rstudio/cheatsheets/raw/main/factors.pdf) or in Wickham & Grolemund's [chapter on factors](https://r4ds.had.co.nz/factors.html).\n\n\\\n\n\n\n::: {.cell name='Reorder factors'}\n\n```{.example .cell-code}\nLet's reorder the grades so that they are in a more meaningful order for the bar chart above. Here are three options:\n   \n```\n:::\n\n\n\n\\\n\n**Option 1**: From high grade to low grade, with \"S\" and \"AU\" at the end:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGrades %>%\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) %>%\n  ggplot(aes(x = grade)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n\n\n**Option 2**: In terms of ascending frequency:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(GradeDistribution) +\n  geom_col(aes(x = fct_reorder(grade, count), y = count)) +\n  labs(x = \"grade\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'GradeDistribution' not found\n```\n\n\n:::\n:::\n\n\n     \n**Option 3**: In terms of descending frequency:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(GradeDistribution) +\n  geom_col(aes(x = fct_reorder(grade, count, .desc = TRUE), y = count)) +\n  labs(x = \"grade\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'GradeDistribution' not found\n```\n\n\n:::\n:::\n\n::: {.cell name='Recode factors'}\n\n```{.example .cell-code}\nBecause it may not be clear what \"AU\" and \"S\" stand for, let's rename them to \"Audit\" and \"Satisfactory\".   \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGrades %>%\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) %>%\n  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) %>%\n  ggplot(aes(x = grade)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'Grades' not found\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.exercise .cell-code}\nNow that you've developed your data visualization and wrangling skills, \n```\n:::\n\n\n\na. develop a research question to address with the grades and courses data,\nb. create a high quality visualization that addresses your research question,\nc. write a brief description of the visualization and include the insight you gain about the research question.\n\n```\nCourses <- read_csv(\"https://bcheggeseth.github.io/112_spring_2023/data/courses.csv\")\n```\n\n## Appendix: R Functions {.unnumbered}\n\n### Changing the order of levels {.unnumbered}\n\n| Function/Operator |                 Action                 |                       Example |\n|-------------------------|:---------------------------:|------------------:|\n| `fct_relevel()`        |  manually reorder levels of a factor  |   `Grades %>% mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\")))` |\n| `fct_infreq()`        | order levels from highest to lowest frequency    |   `ggplot(Grades) + geom_bar(aes(x = fct_infreq(grade)))` |\n| `fct_reorder()`        | reorder levels by values of another variable |   `ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count), y = count))` |\n| `fct_rev()`        | reverse the current order |   `ggplot(Grades) + geom_bar(aes(x = fct_rev(fct_infreq(grade))))` |\n\n\n\n### Changing the value of levels {-} \n\n| Function/Operator |                 Action                 |                       Example |\n|-------------------------|:---------------------------:|------------------:|\n| `fct_recode()`        |  manually change levels    |   `Grades %>%  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) ` |\n| `fct_lump()`        | group together least common levels      |   `Grades %>% mutate(grade = fct_lump(grade, n = 5))` |\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}